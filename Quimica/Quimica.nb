(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    571715,      11411]
NotebookOptionsPosition[    546758,      10975]
NotebookOutlinePosition[    547201,      10992]
CellTagsIndexPosition[    547158,      10989]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8387438791293287`*^9, 
  3.838743879637824*^9}},ExpressionUUID->"b1875b3c-815e-4b2f-8a03-\
be1dc5db4f43"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", "e", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"e", " ", "=", " ", 
   RowBox[{"<|", "|>"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"e", "@", 
      RowBox[{"Symbol", "[", 
       RowBox[{"ToString", "[", " ", 
        RowBox[{"k", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "=", 
     RowBox[{"QuantityMagnitude", "[", 
      RowBox[{"k", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", " ", 
      RowBox[{"EntityValue", "[", 
       RowBox[{
        RowBox[{"EntityClass", "[", 
         RowBox[{"\"\<Element\>\"", ",", "All"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<AtomicSymbol\>\"", ",", "\"\<AtomicMass\>\""}], "}"}]}],
        "]"}]}], "}"}]}], "\[IndentingNewLine]", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Protect", "[", "e", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Avogadro", " ", ":=", " ", 
   RowBox[{"6.023", "*", 
    SuperscriptBox["10", "23"]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Moles", " ", "=", " ", 
   RowBox[{"Symbol", "[", "\"\<Moles\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Moleculas", " ", "=", " ", 
    RowBox[{"Symbol", "[", "\"\<Moleculas\>\"", "]"}]}], ";"}], "\n"}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{"SymbolQ", " ", "=", " ", 
    RowBox[{"Function", "[", 
     RowBox[{"s", ",", "\n", "  ", 
      RowBox[{"MatchQ", "[", 
       RowBox[{
        RowBox[{"Unevaluated", "@", "s"}], ",", " ", 
        RowBox[{"t_Symbol", " ", "/;", " ", 
         RowBox[{"AtomQ", "[", 
          RowBox[{"Unevaluated", "@", "t"}], "]"}]}]}], "]"}], ",", " ", "\n",
       "  ", "HoldAllComplete"}], "\n", "]"}]}], ";"}], "\n", "  "}], "\n", 
 RowBox[{
  RowBox[{"MolesMoleculas", " ", "=", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"moles", ",", " ", "moleculas"}], "}"}], " ", "|->", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "solveFor", "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"solveFor", " ", "=", " ", 
        RowBox[{"Which", "[", 
         RowBox[{
          RowBox[{"SymbolQ", "[", "moles", "]"}], ",", " ", "\"\<moles\>\"", 
          ",", " ", 
          RowBox[{"SymbolQ", "[", "moleculas", "]"}], ",", " ", 
          "\"\<moleculas\>\""}], "]"}]}], ";", "\n", "    ", 
       RowBox[{"Print", "[", 
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"TraditionalForm", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Solve", "[", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Symbol", "[", "\"\<moleculas\>\"", "]"}], " ", "==",
                  "  ", 
                 RowBox[{
                  RowBox[{"Symbol", "[", "\"\<moles\>\"", "]"}], " ", "*", 
                  " ", 
                  FractionBox[
                   RowBox[{"Symbol", "[", "\"\<avogadro\>\"", "]"}], "1"]}]}],
                 " ", ",", "  ", 
                RowBox[{"Symbol", "[", "solveFor", "]"}]}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<moleculas\>\"", ".."}], "->", " ", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{"TraditionalForm", "[", "moleculas", "]"}], "]"}], 
               " ", "\"\< moleculas\>\""}], "]"}]}], ",", " ", 
            RowBox[{
             RowBox[{"\"\<moles\>\"", " ", ".."}], "->", " ", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{"TraditionalForm", "[", "moles", "]"}], "]"}], " ", 
               "\"\< moles\>\""}], "]"}]}]}], " ", "}"}]}], "]"}], "]"}], ";",
        "\n", "\t", 
       RowBox[{
        RowBox[{
         RowBox[{"Solve", "[", " ", 
          RowBox[{"moleculas", " ", "==", " ", 
           RowBox[{"moles", " ", "*", " ", 
            FractionBox["Avogadro", "1"]}]}], " ", "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}]}], "\n", "]"}]}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.838740263870853*^9, 3.838740274757134*^9}, {
   3.838740379886155*^9, 3.838740471773533*^9}, {3.838740509948781*^9, 
   3.8387405233728848`*^9}, {3.8387405990813637`*^9, 3.838740610036665*^9}, {
   3.838740747490447*^9, 3.838740750801983*^9}, {3.8387408296133833`*^9, 
   3.838741005285573*^9}, {3.8387410515715733`*^9, 3.838741052320518*^9}, {
   3.8387413510153217`*^9, 3.8387413516728287`*^9}, {3.838741456660459*^9, 
   3.838741474022148*^9}, {3.838741599144698*^9, 3.8387416192646017`*^9}, {
   3.8387416810425262`*^9, 3.838741725414125*^9}, {3.838741849746372*^9, 
   3.838741858108634*^9}, {3.838741979251162*^9, 3.838741990196278*^9}, {
   3.838742066341381*^9, 3.838742133223708*^9}, {3.838742495957962*^9, 
   3.8387425081917152`*^9}, {3.838742575321322*^9, 3.8387425842578783`*^9}, {
   3.838742720965939*^9, 3.838742802409309*^9}, {3.838742850513927*^9, 
   3.838742882449587*^9}, {3.83874291977929*^9, 3.8387431025602827`*^9}, {
   3.838743168691578*^9, 3.838743259307419*^9}, {3.838743314977088*^9, 
   3.838743358924004*^9}, {3.838743391906645*^9, 3.8387433945699463`*^9}, {
   3.8387434599530573`*^9, 3.838743461211586*^9}, {3.838743519131041*^9, 
   3.838743556559105*^9}, 3.838744391803486*^9, {3.838744620504953*^9, 
   3.838744696750966*^9}, {3.838744733211425*^9, 3.838744761255892*^9}, {
   3.8387462065519648`*^9, 3.838746251010665*^9}, {3.8413396995784082`*^9, 
   3.841339703825987*^9}, 3.841339767255313*^9, {3.8413398960523577`*^9, 
   3.8413398963598747`*^9}, {3.8413402041838293`*^9, 
   3.8413402895723457`*^9}, {3.841344436669918*^9, 3.841344442397417*^9}, {
   3.8413532940762377`*^9, 3.841353300211544*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"f3bba0cc-341a-442b-90c9-14e8c6e56816"],

Cell["", "Text",
 CellChangeTimes->{{3.8387443988894873`*^9, 
  3.838744401180338*^9}},ExpressionUUID->"241137b1-4b30-45d4-acc1-\
e3cb8a743b8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{"Moles", ",", 
   RowBox[{"2.709", " ", 
    SuperscriptBox["10", "24"]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8387409656891403`*^9, 3.838740971310526*^9}, {
  3.838741010877863*^9, 3.838741064311496*^9}, {3.838741887732258*^9, 
  3.838741906151101*^9}, {3.838741998278782*^9, 3.838741998826354*^9}, {
  3.838743261911242*^9, 3.838743265841151*^9}, {3.8387436871005573`*^9, 
  3.83874370185579*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"c270f0a0-ae4f-41f2-b61c-d3240af0d765"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moles  moles\\\", \
\\\"\[Rule]\\\", FractionBox[\\\"2.709`*^24  moleculas\\\", \
\\\"avogadro\\\"]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{
  3.83874190650707*^9, {3.838741992947051*^9, 3.838741999804124*^9}, {
   3.838742097176783*^9, 3.838742105715722*^9}, 3.838742136341391*^9, 
   3.838742596486507*^9, 3.838742764431789*^9, 3.838742804580724*^9, {
   3.83874285505413*^9, 3.838742884617975*^9}, {3.8387429311760406`*^9, 
   3.838742984533284*^9}, {3.838743033457781*^9, 3.8387431044179583`*^9}, 
   3.838743186158677*^9, {3.838743232466682*^9, 3.8387432662171297`*^9}, {
   3.838743329376177*^9, 3.8387433612266703`*^9}, {3.838743418594502*^9, 
   3.8387434680164003`*^9}, {3.838743530017555*^9, 3.838743558648676*^9}, 
   3.838743702576479*^9},
 CellLabel->
  "During evaluation of \
In[259]:=",ExpressionUUID->"7b542557-0558-453d-9ba6-0ff8bb749c23"],

Cell[BoxData[
 RowBox[{"Moles", "\[Rule]", "4.497758592063756`"}]], "Output",
 CellChangeTimes->{{3.8387409684823647`*^9, 3.838740971693678*^9}, {
   3.8387410466274147`*^9, 3.8387410651238956`*^9}, 3.8387411049948587`*^9, 
   3.838741585315238*^9, 3.838741728056575*^9, 3.838741860373517*^9, {
   3.838741899066293*^9, 3.838741906490213*^9}, {3.83874199294309*^9, 
   3.838741999822122*^9}, {3.8387420971868877`*^9, 3.838742105722973*^9}, 
   3.838742136344248*^9, 3.8387425964899073`*^9, 3.8387427644411*^9, 
   3.83874280458934*^9, {3.838742855062853*^9, 3.838742884634378*^9}, {
   3.8387429311868258`*^9, 3.8387429845425177`*^9}, {3.8387430335069447`*^9, 
   3.838743104423682*^9}, 3.838743186162696*^9, {3.8387432324708853`*^9, 
   3.838743266223875*^9}, {3.838743329380756*^9, 3.838743361230256*^9}, {
   3.8387434185983047`*^9, 3.8387434680216637`*^9}, {3.838743530026119*^9, 
   3.838743558655117*^9}, 3.838743702581017*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"e0217faa-ae4e-4dee-9e93-99a683fe57b7"],

Cell[BoxData[
 TemplateBox[{
  "14.007`", "\"u\"", "unified atomic mass units", "\"AtomicMassUnit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.838743905953292*^9, 3.8387439486285143`*^9}},
 CellLabel->
  "Out[263]=",ExpressionUUID->"c8540196-598a-4d63-88d6-4a3714b4bbf3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WolframAlpha", "[", 
  RowBox[{"\"\<atomic weight N\>\"", ",", " ", "\"\<Result\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8387439559299393`*^9, 3.838743969945387*^9}, {
  3.8387440066482487`*^9, 3.838744012735786*^9}, {3.838744055827636*^9, 
  3.8387440752504253`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"bc6b88c5-a3c8-4b01-8c7f-bc19036b9824"],

Cell[BoxData[
 TemplateBox[{
  "14.007`5.", "\"u\"", "unified atomic mass units", "\"AtomicMassUnit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.83874397263338*^9, 3.838744014585291*^9, {3.838744063241761*^9, 
   3.838744076910367*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"14fb2083-cbe5-482d-83e6-044414c6d858"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantityMagnitude", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{"14.007`5.", ",", "\"\<AtomicMassUnit\>\""}], "]"}], 
  "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[275]:=",ExpressionUUID->"ff3884b9-3573-483f-b614-3ee9ab9f3501"],

Cell[BoxData["14.007`5."], "Output",
 CellChangeTimes->{3.838744506619894*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"3a8a730c-ecae-464e-8599-aa13e4f3d5de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantityMagnitude", "[", 
  RowBox[{"WolframAlpha", "[", 
   RowBox[{"\"\<atomic weight N\>\"", ",", " ", "\"\<Result\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{3.838744105179985*^9},
 NumberMarks->False,
 CellLabel->
  "In[274]:=",ExpressionUUID->"cba4915c-0e5c-455f-994b-b5c29dfc707d"],

Cell[BoxData["14.007`5."], "Output",
 CellChangeTimes->{{3.838744095425658*^9, 3.838744107507207*^9}, 
   3.838744158511023*^9, 3.838744279525504*^9},
 CellLabel->
  "Out[274]=",ExpressionUUID->"2796cebe-bd11-40e3-bb0e-0dd8bc409603"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"46", " ", "*", " ", 
  RowBox[{"100", " ", "/", " ", "78"}]}]], "Input",
 CellChangeTimes->{{3.8387445169641733`*^9, 3.838744522285708*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"6c139330-e451-426c-8a55-fb7e2c60452c"],

Cell[BoxData[
 FractionBox["2300", "39"]], "Output",
 CellChangeTimes->{3.8387445231532927`*^9},
 CellLabel->
  "Out[276]=",ExpressionUUID->"3f9ce1ad-b6d3-4d1a-997a-e34e420e984a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["2300", "39"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[277]:=",ExpressionUUID->"7d19f75c-7bd8-4277-94ad-302b3eb7eb1b"],

Cell[BoxData["58.97435897435897`"], "Output",
 CellChangeTimes->{3.838744525316936*^9},
 CellLabel->
  "Out[277]=",ExpressionUUID->"7776a52b-0afb-4d74-97f6-1f009d063ae9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2.709", " ", 
  SuperscriptBox["10", "24"], " ", "*", " ", "0.5897"}]], "Input",
 CellChangeTimes->{{3.838744560767172*^9, 3.838744565307419*^9}},
 CellLabel->
  "In[278]:=",ExpressionUUID->"4582c969-8a58-4a5e-bfc2-dc7c2a13e4bd"],

Cell[BoxData["1.5974973`*^24"], "Output",
 CellChangeTimes->{3.8387445659326687`*^9},
 CellLabel->
  "Out[278]=",ExpressionUUID->"a4cfa425-bcb6-4236-82d6-7d549a73c61b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PesoDe", "[", "\"\<H\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.838744647669263*^9, 3.8387446691343*^9}, {
  3.838744783651952*^9, 3.838744793264968*^9}},
 CellLabel->
  "In[315]:=",ExpressionUUID->"a99c89c7-2909-4a82-8ee0-337dee6c8b07"],

Cell[BoxData["1.008`4."], "Output",
 CellChangeTimes->{{3.838744651362389*^9, 3.8387447001036873`*^9}, 
   3.838744739743689*^9, {3.838744772172481*^9, 3.838744795750846*^9}},
 CellLabel->
  "Out[315]=",ExpressionUUID->"3edbd2e5-2fc9-4def-9d30-1b1be8b9e674"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"0.056", "/", "27"}], " ", ")"}], " ", "*", " ", 
  "Avogadro"}]], "Input",
 CellChangeTimes->{{3.8387448432827272`*^9, 3.8387449110435753`*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"4d4bfb0b-f948-4235-8934-41bcf92ecd31"],

Cell[BoxData["1.2492148148148146`*^21"], "Output",
 CellChangeTimes->{{3.8387448484936943`*^9, 3.838744912105397*^9}, 
   3.83874507077252*^9},
 CellLabel->
  "Out[324]=",ExpressionUUID->"4a0e38fc-9aec-4c60-871e-05482e806192"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8387446648334227`*^9, 
  3.83874466568959*^9}},ExpressionUUID->"e4f1a6ed-0e1c-4870-842b-\
ec673bd64111"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"27", "  ", "*", " ", "Avogadro"}]], "Input",
 CellChangeTimes->{{3.838745045876566*^9, 3.8387450471988773`*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"be6a1c5e-c808-43d8-95ba-0536ec98d07e"],

Cell[BoxData["1.6262099999999997`*^25"], "Output",
 CellChangeTimes->{{3.838745047931408*^9, 3.838745068904924*^9}},
 CellLabel->
  "Out[323]=",ExpressionUUID->"6d52691d-84f9-4021-bfb2-86473efa7c8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{
   RowBox[{"1", "/", "16"}], ",", "Moleculas"}], "]"}]], "Input",
 CellChangeTimes->{{3.838745126320099*^9, 3.8387451366215467`*^9}, 
   3.838745232908231*^9, 3.838745728940091*^9, {3.838745904301655*^9, 
   3.8387459063306313`*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"5e0f62c2-bdf4-4734-beca-a7ba6239b95c"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moleculas  moleculas\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"avogadro\\\", \\\" \\\", \\\"1\\n--  \
moles\\n16\\\"}]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{3.838745137268341*^9, 3.838745729398212*^9, 
  3.838745914013968*^9},
 CellLabel->
  "During evaluation of \
In[335]:=",ExpressionUUID->"5d837458-06a6-4259-a90d-d404a49bbdb4"],

Cell[BoxData[
 RowBox[{"Moleculas", "\[Rule]", "3.7643749999999994`*^22"}]], "Output",
 CellChangeTimes->{3.8387451372736063`*^9, 3.838745729404314*^9, 
  3.838745914020494*^9},
 CellLabel->
  "Out[335]=",ExpressionUUID->"5a0c0ccd-dc09-42ec-a962-4a5bf0183000"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{
   RowBox[{"1", "-", "0.0207"}], ",", "Moleculas"}], "]"}]], "Input",
 CellChangeTimes->{{3.8387452374764977`*^9, 3.838745237731257*^9}, 
   3.838745720922113*^9},
 CellLabel->
  "In[333]:=",ExpressionUUID->"82e1ebbd-1bfa-4996-84d8-3e87578b38b8"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moleculas  moleculas\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"avogadro\\\", \\\" \\\", \\\"0.9793`  moles\\\"}]}], \
TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{3.838745238542823*^9, 3.838745721235588*^9},
 CellLabel->
  "During evaluation of \
In[333]:=",ExpressionUUID->"7275b4a6-0711-45f2-b18e-1839d122d55e"],

Cell[BoxData[
 RowBox[{"Moleculas", "\[Rule]", "5.898323899999999`*^23"}]], "Output",
 CellChangeTimes->{3.8387452385479937`*^9, 3.8387457212409678`*^9},
 CellLabel->
  "Out[333]=",ExpressionUUID->"f184cb9d-6af7-4459-b4f0-cf4707a0356c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4.7762389999999996`*^23", " ", "+", " ", 
  "1.2467609999999998`*^23"}]], "Input",
 CellChangeTimes->{{3.8387452419221077`*^9, 3.838745245205233*^9}},
 CellLabel->
  "In[327]:=",ExpressionUUID->"6fbc007d-1f19-4f89-a8c5-0170a142a268"],

Cell[BoxData["6.022999999999999`*^23"], "Output",
 CellChangeTimes->{3.838745245887044*^9},
 CellLabel->
  "Out[327]=",ExpressionUUID->"25f617cb-68ea-48a4-b903-9c7b1199d4e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["Avogadro"], "Input",
 CellChangeTimes->{{3.838745250204854*^9, 3.838745251113415*^9}},
 CellLabel->
  "In[328]:=",ExpressionUUID->"876d1125-364a-483d-b085-86977636584c"],

Cell[BoxData["6.022999999999999`*^23"], "Output",
 CellChangeTimes->{3.838745251442369*^9},
 CellLabel->
  "Out[328]=",ExpressionUUID->"ea239769-7411-42e9-b934-a95e2a9bb64a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{"Moles", ",", 
   RowBox[{"2.709", " ", 
    SuperscriptBox["10", "24"]}]}], "]"}]], "Input",ExpressionUUID->"df5c8862-\
77e5-4d8f-9fd9-7da1ad61bdc0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1", "/", "16"}], " ", "*", " ", "Avogadro"}]], "Input",
 CellChangeTimes->{{3.838745919125486*^9, 3.8387459231347237`*^9}, 
   3.838746011090744*^9},
 CellLabel->
  "In[336]:=",ExpressionUUID->"98d98e25-dae0-45d4-a373-aca7c04cadff"],

Cell[BoxData["3.7643749999999994`*^22"], "Output",
 CellChangeTimes->{3.838745923434977*^9},
 CellLabel->
  "Out[336]=",ExpressionUUID->"c38dbd45-3671-450a-9a8e-1beae08bc741"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", "/", "16"}], "]"}], ",", "Moleculas"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", "/", "32"}], "]"}], ",", "Moleculas"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", "/", "48"}], "]"}], ",", "Moleculas"}], "]"}]}], "Input",
 CellChangeTimes->{{3.838746029102666*^9, 3.838746066597773*^9}, {
  3.83874614019851*^9, 3.8387461518404512`*^9}},
 CellLabel->
  "In[384]:=",ExpressionUUID->"cd6e7bb1-2d0b-45f8-b388-d744ca929c16"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moleculas  moleculas\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"avogadro\\\", \\\" \\\", \\\"1\\n--  \
moles\\n16\\\"}]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{{3.838746032773117*^9, 3.8387460671292543`*^9}, {
  3.838746270823299*^9, 3.8387462751846237`*^9}},
 CellLabel->
  "During evaluation of \
In[384]:=",ExpressionUUID->"dbd3eff6-70b2-4019-a084-ca9ba9c8232c"],

Cell[BoxData[
 RowBox[{"Moleculas", "\[Rule]", "3.7643749999999994`*^22"}]], "Output",
 CellChangeTimes->{{3.838746032778996*^9, 3.838746067134263*^9}, {
  3.838746270827858*^9, 3.838746275189123*^9}},
 CellLabel->
  "Out[384]=",ExpressionUUID->"120f01b2-142b-4eee-b5a1-0f4f7bd0ceeb"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moleculas  moleculas\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"avogadro\\\", \\\" \\\", \\\"1\\n--  \
moles\\n32\\\"}]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{{3.838746032773117*^9, 3.8387460671292543`*^9}, {
  3.838746270823299*^9, 3.83874627519551*^9}},
 CellLabel->
  "During evaluation of \
In[384]:=",ExpressionUUID->"0c856dd3-c2ec-4ab3-a873-886159759153"],

Cell[BoxData[
 RowBox[{"Moleculas", "\[Rule]", "1.8821874999999997`*^22"}]], "Output",
 CellChangeTimes->{{3.838746032778996*^9, 3.838746067134263*^9}, {
  3.838746270827858*^9, 3.8387462752015944`*^9}},
 CellLabel->
  "Out[385]=",ExpressionUUID->"d4fc9e5a-0c7f-44c8-b064-5b81d7cf382b"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moleculas  moleculas\\\", \\\"\
\[Rule]\\\", RowBox[{\\\"avogadro\\\", \\\" \\\", \\\"1\\n--  \
moles\\n48\\\"}]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{{3.838746032773117*^9, 3.8387460671292543`*^9}, {
  3.838746270823299*^9, 3.83874627520804*^9}},
 CellLabel->
  "During evaluation of \
In[384]:=",ExpressionUUID->"56a73c8e-afdb-4f83-bfa4-54e530d75fd4"],

Cell[BoxData[
 RowBox[{"Moleculas", "\[Rule]", "1.2547916666666664`*^22"}]], "Output",
 CellChangeTimes->{{3.838746032778996*^9, 3.838746067134263*^9}, {
  3.838746270827858*^9, 3.8387462752135*^9}},
 CellLabel->
  "Out[386]=",ExpressionUUID->"dc14f8bf-99ef-4f2d-b1e5-ad9abbd70164"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{"Moles", ",", " ", 
   RowBox[{"2.709", " ", 
    SuperscriptBox["10", "24"]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.83910458988041*^9, 3.839104617610973*^9}},
 CellLabel->
  "In[313]:=",ExpressionUUID->"99b56a65-a1fc-41c0-a87f-1134b67a6a66"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moles  moles\\\", \
\\\"\[Rule]\\\", FractionBox[\\\"2.709`*^24  moleculas\\\", \
\\\"avogadro\\\"]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{3.8413402709086313`*^9},
 CellLabel->
  "During evaluation of \
In[313]:=",ExpressionUUID->"9f09161c-8701-422a-9456-128bff5936c1"],

Cell[BoxData[
 RowBox[{"Moles", "\[Rule]", "4.497758592063756`"}]], "Output",
 CellChangeTimes->{
  3.839104618207011*^9, {3.841340245406304*^9, 3.841340270915895*^9}},
 CellLabel->
  "Out[313]=",ExpressionUUID->"7f06d9de-d4cd-4334-96cf-6d23adc54850"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "H"}]], "Input",
 CellChangeTimes->{{3.8413444534678097`*^9, 3.841344455723905*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"b7ef4e6a-d4d5-47cb-a7e9-89b08112b10f"],

Cell[BoxData["1.008`4."], "Output",
 CellChangeTimes->{3.8413444567806253`*^9},
 CellLabel->
  "Out[323]=",ExpressionUUID->"afccec4a-5e75-470f-9dad-125356a32a30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MolesMoleculas", "[", 
  RowBox[{"Moles", ",", " ", 
   RowBox[{"1.20", " ", 
    SuperscriptBox["10", 
     RowBox[{"-", "4"}]]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.841353876278425*^9, 3.8413538925187407`*^9}},
 CellLabel->
  "In[363]:=",ExpressionUUID->"a21740d4-326f-466a-be11-ba27e5514174"],

Cell[BoxData["\<\"\\!\\(\\*FormBox[RowBox[{\\\"Moles  moles\\\", \
\\\"\[Rule]\\\", FractionBox[\\\"0.00012`  moleculas\\\", \
\\\"avogadro\\\"]}], TraditionalForm]\\)\"\>"], "Print",
 CellChangeTimes->{3.841353893967925*^9},
 CellLabel->
  "During evaluation of \
In[363]:=",ExpressionUUID->"32908e0a-5ded-48f1-9d03-303564ab52c0"],

Cell[BoxData[
 RowBox[{"Moles", "\[Rule]", "1.9923626099950194`*^-28"}]], "Output",
 CellChangeTimes->{3.8413538939788523`*^9},
 CellLabel->
  "Out[363]=",ExpressionUUID->"a6ef5537-85f4-4141-832c-b25bbfcd5050"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "H"}]], "Input",
 CellChangeTimes->{{3.841354082669157*^9, 3.8413540909028893`*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"a9931248-140a-49dd-b3aa-503a9613152b"],

Cell[BoxData["1.008`4."], "Output",
 CellChangeTimes->{{3.841354085564283*^9, 3.841354091556616*^9}},
 CellLabel->
  "Out[365]=",ExpressionUUID->"3286f840-1868-44e2-8e4f-e85a5faaf01f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"1.9923626099950194`*^-28", " ", "*", " ", "16"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.84135413929803*^9, 3.841354142044627*^9}},
 CellLabel->
  "In[366]:=",ExpressionUUID->"50604bfe-13d4-49fc-b1b9-ff2a1c9f1e0c"],

Cell[BoxData["3.187780175992031`*^-27"], "Output",
 CellChangeTimes->{3.841354144524086*^9},
 CellLabel->
  "Out[366]=",ExpressionUUID->"9ee40c6f-ff74-44b0-80f0-adf1d1a32203"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "N"}], " ", "+", " ", 
  RowBox[{"e", "@", "H"}], " ", "+", " ", 
  RowBox[{"e", "@", "N"}]}]], "Input",
 CellChangeTimes->{{3.841354194452279*^9, 3.841354225372036*^9}},
 CellLabel->
  "In[370]:=",ExpressionUUID->"6709d5eb-46ba-48b6-b44a-11fa9ac2f9d9"],

Cell[BoxData["29.022`4.8818707603141025"], "Output",
 CellChangeTimes->{{3.841354196435091*^9, 3.841354226066194*^9}},
 CellLabel->
  "Out[370]=",ExpressionUUID->"245e5f5d-9430-440f-bcd9-c45384e16343"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "N"}]], "Input",
 CellChangeTimes->{{3.841354264865221*^9, 3.8413542671197968`*^9}},
 CellLabel->
  "In[371]:=",ExpressionUUID->"3e11afce-4ca1-4cdb-9f6b-34d0b0269601"],

Cell[BoxData["14.007`5."], "Output",
 CellChangeTimes->{3.841354267785001*^9},
 CellLabel->
  "Out[371]=",ExpressionUUID->"1d189880-dd70-4e46-8cac-570b876c3bc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "C"}]], "Input",
 CellChangeTimes->{{3.8413542696375*^9, 3.8413542778747683`*^9}},
 CellLabel->
  "In[372]:=",ExpressionUUID->"9ebbe846-4ba3-4f40-b2ae-dc63dd9c44ed"],

Cell[BoxData["12.011`5."], "Output",
 CellChangeTimes->{3.841354278207838*^9},
 CellLabel->
  "Out[372]=",ExpressionUUID->"7d4e52e0-9e8c-4d81-b115-8458b4881a24"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "H"}]], "Input",
 CellChangeTimes->{{3.841354280661531*^9, 3.8413542849489603`*^9}},
 CellLabel->
  "In[373]:=",ExpressionUUID->"8f56042f-97f9-43b8-a825-9e88332ad692"],

Cell[BoxData["1.008`4."], "Output",
 CellChangeTimes->{3.841354285527403*^9},
 CellLabel->
  "Out[373]=",ExpressionUUID->"b07f2cb2-d7bc-45cf-850e-faf10a0e1cf4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"56", "/", "27"}]], "Input",
 CellChangeTimes->{{3.841354316762267*^9, 3.841354322059252*^9}},
 CellLabel->
  "In[375]:=",ExpressionUUID->"9f2d2f38-31f7-4f6d-89d3-ccf9866ab50a"],

Cell[BoxData[
 FractionBox["56", "27"]], "Output",
 CellChangeTimes->{{3.841354319812852*^9, 3.8413543223554373`*^9}},
 CellLabel->
  "Out[375]=",ExpressionUUID->"95427121-2a33-4deb-ba32-edd44e7ca84c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["56", "27"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[376]:=",ExpressionUUID->"6c1276f3-ed50-4d89-88ba-9e0326335eee"],

Cell[BoxData["2.074074074074074`"], "Output",
 CellChangeTimes->{3.84135432469801*^9},
 CellLabel->
  "Out[376]=",ExpressionUUID->"2c4cf6b4-9395-4d85-beff-25eb64ace449"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "S"}]], "Input",
 CellChangeTimes->{{3.841354817195047*^9, 3.841354834737022*^9}},
 CellLabel->
  "In[379]:=",ExpressionUUID->"4a319255-4fe7-4c41-9afa-adc04e883f36"],

Cell[BoxData["32.06`4."], "Output",
 CellChangeTimes->{3.841354836073263*^9},
 CellLabel->
  "Out[379]=",ExpressionUUID->"68464285-eb73-4e0a-ab23-1df13ac3e42c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"39.5", "/", "32"}]], "Input",
 CellChangeTimes->{{3.841355272681967*^9, 3.8413553104989357`*^9}},
 CellLabel->
  "In[383]:=",ExpressionUUID->"59d3fa2d-17ab-4350-bb40-5245085ab552"],

Cell[BoxData["1.234375`"], "Output",
 CellChangeTimes->{{3.84135527672694*^9, 3.841355311335739*^9}},
 CellLabel->
  "Out[383]=",ExpressionUUID->"efa66c9b-5e28-472f-9bf5-8ca34706b536"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{"6.21", "/", 
   RowBox[{"(", 
    RowBox[{"9.86", "/", "16"}], ")"}]}], ")"}]], "Input",
 CellChangeTimes->{{3.8413553290965433`*^9, 3.841355385535492*^9}, {
  3.8413554585458193`*^9, 3.841355492657345*^9}},
 CellLabel->
  "In[390]:=",ExpressionUUID->"7dabc6cc-7a33-453c-a716-dfbcbc8b343e"],

Cell[BoxData["10.077079107505073`"], "Output",
 CellChangeTimes->{{3.841355332467478*^9, 3.841355386066901*^9}, 
   3.8413554940310993`*^9},
 CellLabel->
  "Out[390]=",ExpressionUUID->"0f099867-d31d-470c-806a-17dc2189a8d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"10.2", "*", "5"}]], "Input",
 CellChangeTimes->{{3.841355425312766*^9, 3.841355427764324*^9}},
 CellLabel->
  "In[389]:=",ExpressionUUID->"cda18171-3984-4c21-9cb1-14bb64181146"],

Cell[BoxData["51.`"], "Output",
 CellChangeTimes->{3.841355428314958*^9},
 CellLabel->
  "Out[389]=",ExpressionUUID->"d3ecba0c-423e-4547-9879-337562697d5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RealDigits", "[", "51.`", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[391]:=",ExpressionUUID->"622dd739-96d8-4886-afa0-cf1418cc2c45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "5", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
     ",", "0"}], "}"}], ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.84135557416541*^9},
 CellLabel->
  "Out[391]=",ExpressionUUID->"9b8493d4-b338-46f3-ba97-d768588b1ad3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"12", " ", "*", " ", "6"}], " ", "+", " ", 
  RowBox[{"1", " ", "*", " ", "10"}], " ", "+", " ", 
  RowBox[{"16", " ", "*", " ", "1"}], " ", "+", " ", 
  RowBox[{"32", " ", "*", " ", "2"}]}]], "Input",
 CellChangeTimes->{{3.841355639186469*^9, 3.841355668955682*^9}},
 CellLabel->
  "In[393]:=",ExpressionUUID->"284f1489-357f-492e-9132-d90e74e8149e"],

Cell[BoxData["162"], "Output",
 CellChangeTimes->{{3.841355664054451*^9, 3.841355669373041*^9}},
 CellLabel->
  "Out[393]=",ExpressionUUID->"bda9c646-7db3-4ef2-96fa-57f5c22e8638"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RowReduce", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", 
      RowBox[{"-", "2"}], ",", " ", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "0", ",", 
      RowBox[{"-", "4"}], ",", " ", 
      RowBox[{"-", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", 
      RowBox[{"-", "2"}], ",", " ", 
      RowBox[{"-", "1"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.841356268555952*^9, 3.841356285838311*^9}, {
  3.841356651962055*^9, 3.841356660336913*^9}, {3.8413568348000107`*^9, 
  3.841356897472418*^9}},
 CellLabel->
  "In[402]:=",ExpressionUUID->"237d564c-373f-4689-a05d-c6309544287e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", 
     RowBox[{"-", 
      FractionBox["3", "2"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8413562868189573`*^9, {3.841356654129524*^9, 3.841356660841571*^9}, 
   3.8413568684943953`*^9, 3.841356900210705*^9},
 CellLabel->
  "Out[402]=",ExpressionUUID->"70566ae7-c757-42ba-8353-be65e3fe4f0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", 
      RowBox[{"-", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1", ",", 
      RowBox[{"-", 
       FractionBox["3", "2"]}]}], "}"}]}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[404]:=",ExpressionUUID->"3b086448-19b1-4fb9-92fc-2f7ca57aa6d5"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", 
      RowBox[{"-", "2"}]},
     {"0", "1", "0", 
      RowBox[{"-", "1"}]},
     {"0", "0", "1", 
      RowBox[{"-", 
       FractionBox["3", "2"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.84135692055237*^9},
 CellLabel->
  "Out[404]//MatrixForm=",ExpressionUUID->"b21f4d99-195d-45ba-850c-\
05fbb1261007"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"12", " ", "+", " ", "3", " ", "+", " ", "16", " ", "+", " ", 
  "1"}]], "Input",
 CellChangeTimes->{{3.841357582150922*^9, 3.841357590326788*^9}},
 CellLabel->
  "In[405]:=",ExpressionUUID->"776566f1-b89b-4235-a423-987dadf2d73f"],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.841357591057911*^9},
 CellLabel->
  "Out[405]=",ExpressionUUID->"e26d0aa1-e89f-4fa3-8873-cc4ed069a9c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"16", " ", "*", " ", "2"}], " ", "+", " ", "12"}]], "Input",
 CellChangeTimes->{{3.8413576016010027`*^9, 3.8413576062795877`*^9}},
 CellLabel->
  "In[406]:=",ExpressionUUID->"0910404a-44b1-41a2-870e-b29813626324"],

Cell[BoxData["44"], "Output",
 CellChangeTimes->{3.841357606879475*^9},
 CellLabel->
  "Out[406]=",ExpressionUUID->"6b9d847a-102a-47c6-8916-aa9925542095"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"12", " ", "+", " ", "3", " ", "+", "12", " ", "+", " ", 
  RowBox[{"16", " ", "*", " ", "2"}], " ", "+", " ", "1"}]], "Input",
 CellChangeTimes->{{3.841357623259582*^9, 3.841357626220708*^9}, {
  3.8413581104104958`*^9, 3.841358119549466*^9}},
 CellLabel->
  "In[407]:=",ExpressionUUID->"8d58d52b-0ffa-4613-a276-192cc34a183e"],

Cell[BoxData["60"], "Output",
 CellChangeTimes->{3.8413581213566847`*^9},
 CellLabel->
  "Out[407]=",ExpressionUUID->"5947ac6e-3b1f-493f-a69f-1224d1a2554b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{"15", "/", "32"}], "]"}], "/", "4"}]], "Input",
 CellChangeTimes->{{3.841358792579515*^9, 3.84135882346635*^9}, {
  3.841358866513288*^9, 3.8413588744650583`*^9}},
 CellLabel->
  "In[413]:=",ExpressionUUID->"6d7cf13f-29e9-4aa9-a86a-15b7b34ea1d7"],

Cell[BoxData["0.1171875`"], "Output",
 CellChangeTimes->{3.841358876419024*^9},
 CellLabel->
  "Out[413]=",ExpressionUUID->"d95e8db7-e8b9-4294-ac15-a7de5439793c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.22727272727272727`", "/", "2"}]], "Input",
 CellChangeTimes->{{3.841358842131394*^9, 3.841358851187236*^9}},
 CellLabel->
  "In[412]:=",ExpressionUUID->"94d77b0e-ad52-4765-9af2-5260966ee78c"],

Cell[BoxData["0.11363636363636363`"], "Output",
 CellChangeTimes->{{3.841358843650771*^9, 3.8413588515890827`*^9}},
 CellLabel->
  "Out[412]=",ExpressionUUID->"b81a0870-567f-4f91-98d3-6f2ddc1ebd70"]
}, Open  ]],

Cell[BoxData[
 FractionBox["10", "32"]], "Input",
 CellChangeTimes->{{3.841358808725643*^9, 
  3.841358810935892*^9}},ExpressionUUID->"391bff9d-f24b-4c6b-b926-\
de0c3587fe9e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["15", "32"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[409]:=",ExpressionUUID->"c930b1af-8ccd-49e1-994d-4c566bbaa4c7"],

Cell[BoxData["0.46875`"], "Output",
 CellChangeTimes->{3.84135879773637*^9},
 CellLabel->
  "Out[409]=",ExpressionUUID->"b8968a4f-24d4-439d-b757-87a8f64a9fac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.117187", " ", ">", " ", "0.11363636363636363`"}]], "Input",
 CellChangeTimes->{{3.8413588887438507`*^9, 3.841358895586947*^9}},
 CellLabel->
  "In[414]:=",ExpressionUUID->"9e4b2214-8cc8-4efd-a905-0c5dfc0009d5"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.841358896272005*^9},
 CellLabel->
  "Out[414]=",ExpressionUUID->"f5371229-c584-4de9-a146-f8393fd50bca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.2272", " ", "*", " ", 
  RowBox[{"(", 
   RowBox[{"3", "/", "2"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8413595747668953`*^9, 3.84135958652846*^9}},
 CellLabel->
  "In[416]:=",ExpressionUUID->"bc58e886-5209-46d8-b1d3-02a4fb623cb7"],

Cell[BoxData["0.3408`"], "Output",
 CellChangeTimes->{{3.841359582812248*^9, 3.8413595873468523`*^9}},
 CellLabel->
  "Out[416]=",ExpressionUUID->"5ad6999d-71d8-4e3f-8634-ed87626a1d59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.3408`", " ", "*", " ", 
  RowBox[{"(", 
   RowBox[{"10", "/", "3"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.841359801511951*^9, 3.841359806140977*^9}},
 CellLabel->
  "In[417]:=",ExpressionUUID->"4caaa20a-ce40-4157-8425-20b43f942465"],

Cell[BoxData["1.1360000000000001`"], "Output",
 CellChangeTimes->{3.841359807253275*^9},
 CellLabel->
  "Out[417]=",ExpressionUUID->"ddbaba57-d329-4898-8e38-7a94723ca98b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"19.1", "/", "60"}]], "Input",
 CellChangeTimes->{{3.841361248538825*^9, 3.8413612512794523`*^9}},
 CellLabel->
  "In[418]:=",ExpressionUUID->"6b5e468b-b9f8-41c7-9340-1d61f80e1f13"],

Cell[BoxData["0.31833333333333336`"], "Output",
 CellChangeTimes->{3.8413612519898453`*^9},
 CellLabel->
  "Out[418]=",ExpressionUUID->"7366f158-d3a3-456a-a228-a243d74bee5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "O"}]], "Input",
 CellChangeTimes->{{3.841361540439868*^9, 3.841361570140572*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"5043f06b-b28c-4672-bdc1-8521a570ed7e"],

Cell[BoxData["15.999`5."], "Output",
 CellChangeTimes->{{3.841361543537369*^9, 3.8413615704656982`*^9}},
 CellLabel->
  "Out[422]=",ExpressionUUID->"bf776cf4-4af9-4932-b85c-1b13289d7469"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "H"}], " ", "+", " ", 
  RowBox[{"e", "@", "N"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], " ", "*", " ", "3"}]}]], "Input",
 CellChangeTimes->{{3.841361588344531*^9, 3.841361596133834*^9}},
 CellLabel->
  "In[423]:=",ExpressionUUID->"6dfcb092-eb95-485e-9628-d8c724472344"],

Cell[BoxData["63.0119999999999999999`4.941584386339701"], "Output",
 CellChangeTimes->{3.841361596635651*^9},
 CellLabel->
  "Out[423]=",ExpressionUUID->"46438aa4-d6fb-488d-8ee4-fbc23383575d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "Cu"}], " ", "+", " ", 
  RowBox[{"2", " ", 
   RowBox[{"(", " ", 
    RowBox[{
     RowBox[{"e", "@", "N"}], " ", "+", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"e", "@", "O"}], " ", "*", " ", "3"}], ")"}]}], ")"}], 
   " "}]}]], "Input",
 CellChangeTimes->{{3.841361612571443*^9, 3.841361641235745*^9}},
 CellLabel->
  "In[424]:=",ExpressionUUID->"58766f7a-5ce4-42df-9b2e-9f0abb3b5a0f"],

Cell[BoxData["187.5539999999999999998`5."], "Output",
 CellChangeTimes->{3.8413616451408453`*^9},
 CellLabel->
  "Out[424]=",ExpressionUUID->"1f4488a1-acf1-484a-95d1-5cce52a3430e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "N"}], "  ", "+", " ", 
  RowBox[{"e", "@", "O"}]}]], "Input",
 CellChangeTimes->{{3.841361682243856*^9, 3.8413616869884377`*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"45e569f1-303a-4b87-b42a-9646963e1ff2"],

Cell[BoxData["30.006`5."], "Output",
 CellChangeTimes->{3.841361687756818*^9},
 CellLabel->
  "Out[425]=",ExpressionUUID->"d52ec2d2-0d94-40c9-951f-100b72fa108c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"44.47", "/", "53.546"}]], "Input",
 CellChangeTimes->{{3.841361739905655*^9, 3.841361746278051*^9}},
 CellLabel->
  "In[426]:=",ExpressionUUID->"3112dc29-f4c0-41e5-bb83-64d0e3f297c2"],

Cell[BoxData["0.830500877749972`"], "Output",
 CellChangeTimes->{3.8413617469195423`*^9},
 CellLabel->
  "Out[426]=",ExpressionUUID->"34385263-2e1f-4699-8120-d852c463af61"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"189", "/", "63.012"}]], "Input",
 CellChangeTimes->{{3.8413617874434643`*^9, 3.841361797194228*^9}},
 CellLabel->
  "In[427]:=",ExpressionUUID->"907be047-b498-4db7-aeeb-6316ddc29477"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2.99943", "/", "8"}]], "Input",
 CellChangeTimes->{{3.841361817889879*^9, 3.8413618259293947`*^9}},
 CellLabel->
  "In[429]:=",ExpressionUUID->"4bc5e5c6-e893-41d2-adaf-47f3f326bef8"],

Cell[BoxData["0.37492875`"], "Output",
 CellChangeTimes->{{3.841361820669051*^9, 3.8413618263715343`*^9}},
 CellLabel->
  "Out[429]=",ExpressionUUID->"0f766311-9d00-42a8-ad5b-fc019e05e843"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2.99943", " ", "*", " ", 
  RowBox[{"(", 
   RowBox[{"6", " ", "/", " ", "8"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8413622083957853`*^9, 3.841362234108871*^9}},
 CellLabel->
  "In[431]:=",ExpressionUUID->"72a167ec-47d0-4c82-8671-a1dcda9c1205"],

Cell[BoxData["2.2495724999999998`"], "Output",
 CellChangeTimes->{{3.841362210406505*^9, 3.84136223484842*^9}},
 CellLabel->
  "Out[431]=",ExpressionUUID->"33decaf1-7cde-4fc1-bc25-80515d969175"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2.24957", " ", "*", " ", "30.006"}], ")"}], "/", "1"}], " ", 
   ")"}], "*", "0.8"}]], "Input",
 CellChangeTimes->{{3.841362572184371*^9, 3.841362675664761*^9}, {
  3.841362742026958*^9, 3.8413627482016993`*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"94a433a3-886d-4e15-9fa7-ef8c9f8e9003"],

Cell[BoxData["54.000477935999996`"], "Output",
 CellChangeTimes->{{3.8413625786948853`*^9, 3.841362677168706*^9}, 
   3.84136274883381*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"083e4062-6821-4a4c-8e5d-7bd7beef8c35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "@", "N"}]], "Input",
 CellLabel->
  "In[439]:=",ExpressionUUID->"0d3b8d6d-9b17-40cb-88a7-b2498379007d"],

Cell[BoxData["14.007`5."], "Output",
 CellChangeTimes->{3.841363354015068*^9},
 CellLabel->
  "Out[439]=",ExpressionUUID->"6e01fb23-43ff-4c06-9c74-103383d61760"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"189", "/", "23.81"}]], "Input",
 CellChangeTimes->{{3.841363676847584*^9, 3.8413636849751263`*^9}},
 CellLabel->
  "In[440]:=",ExpressionUUID->"6073b9da-bb0e-4e2f-af6d-5c5fe5451e3e"],

Cell[BoxData["7.937841243175137`"], "Output",
 CellChangeTimes->{3.8413636855333757`*^9},
 CellLabel->
  "Out[440]=",ExpressionUUID->"f820beb1-76cc-41d0-b799-6f11a7ce7e19"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"60", " ", "*", " ", 
  RowBox[{"(", 
   RowBox[{"100", "/", "70.31"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.84136406860187*^9, 3.841364077051413*^9}},
 CellLabel->
  "In[441]:=",ExpressionUUID->"1992e3f5-71ed-4f2e-bea3-ccc938704da3"],

Cell[BoxData["85.33636751528944`"], "Output",
 CellChangeTimes->{3.84136407743855*^9},
 CellLabel->
  "Out[441]=",ExpressionUUID->"47bf8aac-78fc-4383-ba86-a4df2c3e3a0b"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.841364441410324*^9, 
  3.841364514678194*^9}},ExpressionUUID->"a52e5113-3623-4b2f-b0d4-\
12a9ca7affc6"],

Cell[TextData[{
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"mol", " ", "rl"}], 
      RowBox[{"indice", " ", "rl"}]], " ", "*", " ", 
     FractionBox[
      RowBox[{"peso", " ", "re"}], 
      RowBox[{"indice", " ", "re"}]]}], "=", 
    RowBox[{"g", " ", "que", " ", "si", " ", "se", " ", "usaron", " ", 
     RowBox[{"r", ".", "e", "."}]}]}], "Text"]], "Input",ExpressionUUID->
  "06203036-a68c-4f25-b73a-bbae59c4cb7c"],
 " \ng originales - que si se usaron  = r.e exedente\n\n"
}], "Text",
 CellChangeTimes->{{3.841364519949448*^9, 3.841364546698043*^9}, {
  3.841364623304348*^9, 3.841364647934256*^9}, {3.841367451898045*^9, 
  3.841367459769309*^9}},ExpressionUUID->"23becff9-3d72-4687-8d03-\
b8c9b1f98e44"],

Cell[BoxData[
 RowBox[{"SiSeUsaron", " ", ":=", " ", 
  RowBox[{
   RowBox[{"{", "}"}], " ", "|->", " "}]}]], "Input",
 CellChangeTimes->{{3.841364660979762*^9, 
  3.841364673818056*^9}},ExpressionUUID->"89d1b74c-b2a0-46a5-b3d0-\
6f4338e88511"],

Cell[BoxData[
 RowBox[{"63.012", " "}]], "Input",
 CellChangeTimes->{{3.841364769419232*^9, 3.8413647761408443`*^9}, {
  3.8413649703691607`*^9, 3.84136501047202*^9}, {3.84136507895121*^9, 
  3.8413650830725937`*^9}},ExpressionUUID->"eefad0a5-356e-493b-9c77-\
586dc55d019f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.374943", " ", "*", " ", "187.55"}]], "Input",
 CellChangeTimes->{{3.841365863859511*^9, 3.841365874533621*^9}, {
  3.841365974301552*^9, 3.841365988762582*^9}},
 CellLabel->
  "In[444]:=",ExpressionUUID->"65057db0-2854-448d-9742-4b5922a86abc"],

Cell[BoxData["70.32055965`"], "Output",
 CellChangeTimes->{3.841365875376191*^9, 3.841365989727886*^9},
 CellLabel->
  "Out[444]=",ExpressionUUID->"67797cae-0159-4216-b1bc-9c3e214e7434"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "Al"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "Cl"}], " ", "*", " ", "3"}]}]], "Input",
 CellChangeTimes->{{3.8413659304885273`*^9, 3.841365941117071*^9}},
 CellLabel->
  "In[443]:=",ExpressionUUID->"6ea00d94-25b7-45be-8837-5c8132807726"],

Cell[BoxData["133.3315385`4.09819429435771"], "Output",
 CellChangeTimes->{3.841365941568205*^9},
 CellLabel->
  "Out[443]=",ExpressionUUID->"6ec03eff-6934-4123-bd13-8d6d87efacf8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"70.31", "/", "70.32055965"}]], "Input",
 CellChangeTimes->{{3.84136603807539*^9, 3.8413660515223703`*^9}},
 CellLabel->
  "In[445]:=",ExpressionUUID->"c9647780-39b4-47e5-a979-0610971ebd9f"],

Cell[BoxData["0.9998498355238843`"], "Output",
 CellChangeTimes->{3.841366054368246*^9},
 CellLabel->
  "Out[445]=",ExpressionUUID->"cede4a62-69f2-4f13-97f3-9746e717262d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"120", " ", "*", " "}]], "Input",
 CellChangeTimes->{{3.841366168980398*^9, 
  3.8413661701066093`*^9}},ExpressionUUID->"d24e1262-c3b3-46d6-aca6-\
7f73c2261d02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "Mg"}], " ", "+", " ", 
  RowBox[{"e", "@", "S"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], "  ", "*", " ", "4"}]}]], "Input",
 CellChangeTimes->{{3.841836951355337*^9, 3.8418369707075167`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"498a5d65-e5d8-490b-be8b-6c5cdc962433"],

Cell[BoxData["120.3609999999999999999`4.468867614691432"], "Output",
 CellChangeTimes->{{3.8418369548799343`*^9, 3.8418369719190207`*^9}},
 CellLabel->"Out[11]=",ExpressionUUID->"fdf52b77-7023-41dc-9db4-7ef7dae13977"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"e", "@", "Na"}], " ", "*", " ", "2"}], " ", "+", " ", 
  RowBox[{"e", "@", "C"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], " ", "*", " ", "3"}]}]], "Input",
 CellChangeTimes->{{3.841836981391884*^9, 3.841836995085059*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"2f4d82ef-da59-4384-853f-bea30a83e3ce"],

Cell[BoxData["105.9875385599999999999`5.247042326168329"], "Output",
 CellChangeTimes->{3.841836995805697*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"05bc4c8d-18a1-4bcc-b0f4-6e684262a479"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "Mg"}], " ", "+", " ", 
  RowBox[{"e", "@", "C"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], " ", "*", " ", "3"}]}]], "Input",
 CellChangeTimes->{{3.841837026470175*^9, 3.841837031384335*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"ee2dfcbc-3af6-4c19-92e5-1f48dc3d7181"],

Cell[BoxData["84.313`5."], "Output",
 CellChangeTimes->{3.841837032103897*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"3eb30c58-0bb7-4712-9a60-28975efa4845"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"e", "@", "Na"}], " ", "*", " ", "2"}], " ", "+", " ", 
  RowBox[{"e", "@", "S"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], "  ", "*", " ", "4"}]}]], "Input",
 CellChangeTimes->{3.841837046579373*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"15c2204d-345e-4d52-bdfb-d3b491b1c117"],

Cell[BoxData["142.0355385599999999999`4.5673917400902635"], "Output",
 CellChangeTimes->{3.841837047279591*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"ac74d435-018f-403b-a339-eab32ce73977"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = 
   " 100\.ba 18\.b4 39\[CloseCurlyDoubleQuote]", Typeset`newq$$ = 
   " 100\.ba 18\.b4 39\[CloseCurlyDoubleQuote]", Typeset`chosen$$ = 
   "Quantity[MixedMagnitude[{100, 18, 39}], MixedUnit[{\"AngularDegrees\", \
\"ArcMinutes\", \"ArcSeconds\"}]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse[
              " 100\.ba 18\.b4 39\[CloseCurlyDoubleQuote]", 
               Defer[
                Quantity[
                 MixedMagnitude[{100, 18, 39}], 
                 MixedUnit[{"AngularDegrees", "ArcMinutes", "ArcSeconds"}]]], 
               "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{11., {2., 9.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 " 100\.ba 18\.b4 39\[CloseCurlyDoubleQuote]", 
                  Defer[
                   Quantity[
                    MixedMagnitude[{100, 18, 39}], 
                    
                    MixedUnit[{
                    "AngularDegrees", "ArcMinutes", "ArcSeconds"}]]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 TemplateBox[{"100", "18", "39", 
                   RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
                   RowBox[{"\[ThinSpace]", "\"'\""}], 
                   RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
                   "degrees,arc minutes,arc seconds", 
                   RowBox[{"{", 
                    
                    RowBox[{
                    "\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", 
                    "\"ArcSeconds\""}], "}"}]},
                  "QuantityMixedUnit3"],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 TemplateBox[{"100", "18", "39", 
                   RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
                   RowBox[{"\[ThinSpace]", "\"'\""}], 
                   RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
                   "degrees,arc minutes,arc seconds", 
                   RowBox[{"{", 
                    
                    RowBox[{
                    "\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", 
                    "\"ArcSeconds\""}], "}"}]},
                  "QuantityMixedUnit3"],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    TemplateBox[{"100", "18", "39", 
                    RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
                    RowBox[{"\[ThinSpace]", "\"'\""}], 
                    RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
                    "degrees,arc minutes,arc seconds", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", 
                    "\"ArcSeconds\""}], "}"}]}, "QuantityMixedUnit3"]], 
                   "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse[
                  " 100\.ba 18\.b4 39\[CloseCurlyDoubleQuote]", 
                   Defer[
                    Quantity[
                    MixedMagnitude[{100, 18, 39}], 
                    
                    MixedUnit[{
                    "AngularDegrees", "ArcMinutes", "ArcSeconds"}]]], 
                   "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    " 100\.ba 18\.b4 39\[CloseCurlyDoubleQuote]", 
                    Defer[
                    Quantity[
                    MixedMagnitude[{100, 18, 39}], 
                    
                    MixedUnit[{
                    "AngularDegrees", "ArcMinutes", "ArcSeconds"}]]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    TemplateBox[{"100", "18", "39", 
                    RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
                    RowBox[{"\[ThinSpace]", "\"'\""}], 
                    RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
                    "degrees,arc minutes,arc seconds", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", 
                    "\"ArcSeconds\""}], "}"}]},
                    "QuantityMixedUnit3"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    TemplateBox[{"100", "18", "39", 
                    RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
                    RowBox[{"\[ThinSpace]", "\"'\""}], 
                    RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
                    "degrees,arc minutes,arc seconds", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", 
                    "\"ArcSeconds\""}], "}"}]},
                    "QuantityMixedUnit3"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"100", "18", "39", 
                    RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
                    RowBox[{"\[ThinSpace]", "\"'\""}], 
                    RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
                    "degrees,arc minutes,arc seconds", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", 
                    "\"ArcSeconds\""}], "}"}]}, "QuantityMixedUnit3"]], 
                    "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[19]:=",ExpressionUUID->"4625db83-d83c-4180-ae38-a83ce8d70a5c"],

Cell[BoxData[
 TemplateBox[{"100", "18", "39", 
   RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
   RowBox[{"\[ThinSpace]", "\"'\""}], 
   RowBox[{"\[ThinSpace]", "\"\\\"\""}], "degrees,arc minutes,arc seconds", 
   RowBox[{"{", 
     RowBox[{
      "\"AngularDegrees\"", ",", "\"ArcMinutes\"", ",", "\"ArcSeconds\""}], 
     "}"}]},
  "QuantityMixedUnit3"]], "Output",
 CellChangeTimes->{3.841841671966457*^9, 3.8418417172627077`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"f1a0304c-08d1-4768-85e5-e2e30ab8df60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{"MixedMagnitude", "[", 
     RowBox[{"{", 
      RowBox[{"100", ",", "18", ",", "39"}], "}"}], "]"}], ",", 
    RowBox[{"MixedUnit", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<AngularDegrees\>\"", ",", "\"\<ArcMinutes\>\"", ",", 
       "\"\<ArcSeconds\>\""}], "}"}], "]"}]}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[20]:=",ExpressionUUID->"13e54a30-924a-4bbe-81d5-df1793a9dafb"],

Cell[BoxData[
 TemplateBox[{
   FractionBox[
    RowBox[{"120373", " ", "\[Pi]"}], "216000"], "\"rad\"", "radians", 
   "\"Radians\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.841841724246574*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"b8ef0ce5-6f1e-4b29-b564-71da37781750"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantityMagnitude", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"120373", " ", "\[Pi]"}], "216000"], ",", "\"\<Radians\>\""}], 
   "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[21]:=",ExpressionUUID->"ad839920-cb0c-423d-9e4e-a32b01402c66"],

Cell[BoxData[
 FractionBox[
  RowBox[{"120373", " ", "\[Pi]"}], "216000"]], "Output",
 CellChangeTimes->{3.841841728510582*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"867508ea-c34c-4f76-a188-d7918639786e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"d", "=", 
     RowBox[{"N", "[", 
      FractionBox[
       RowBox[{"120373", " ", "\[Pi]"}], 
       RowBox[{"216000", " ", "\[Degree]"}]], "]"}]}], "}"}], ",", 
   RowBox[{"Defer", "[", 
    RowBox[{"d", " ", "\[Degree]"}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[22]:=",ExpressionUUID->"3d4c2501-1de9-4901-9299-d19451bf79dc"],

Cell[BoxData[
 RowBox[{"100.31083333333333`", " ", "\[Degree]"}]], "Output",
 CellChangeTimes->{3.841841731503014*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"6ac13eaa-84be-4cb0-998e-01b88c72160b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    RowBox[{"MixedMagnitude", "[", 
     RowBox[{"{", 
      RowBox[{"25", ",", "39", ",", "53"}], "}"}], "]"}], ",", 
    RowBox[{"MixedUnit", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<AngularDegrees\>\"", ",", "\"\<ArcMinutes\>\"", ",", 
       "\"\<ArcSeconds\>\""}], "}"}], "]"}]}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[16]:=",ExpressionUUID->"ad6eedc2-d40c-4f1e-a501-4a0b8ea306e9"],

Cell[BoxData[
 TemplateBox[{
   FractionBox[
    RowBox[{"92393", " ", "\[Pi]"}], "648000"], "\"rad\"", "radians", 
   "\"Radians\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8418416759812527`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"60cc6f28-5874-465f-a8d7-e1c035e804ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"QuantityMagnitude", "[", 
  RowBox[{"Quantity", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"92393", " ", "\[Pi]"}], "648000"], ",", "\"\<Radians\>\""}], 
   "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[17]:=",ExpressionUUID->"0394883f-d864-471c-a1e6-1e0eca8e4d11"],

Cell[BoxData[
 FractionBox[
  RowBox[{"92393", " ", "\[Pi]"}], "648000"]], "Output",
 CellChangeTimes->{3.841841682761565*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"d3c98735-4384-472c-8b09-2d88c1c55887"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"d", "=", 
     RowBox[{"N", "[", 
      FractionBox[
       RowBox[{"92393", " ", "\[Pi]"}], 
       RowBox[{"648000", " ", "\[Degree]"}]], "]"}]}], "}"}], ",", 
   RowBox[{"Defer", "[", 
    RowBox[{"d", " ", "\[Degree]"}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[18]:=",ExpressionUUID->"691546dc-a1a4-45f2-91d8-7695eb3144a3"],

Cell[BoxData[
 RowBox[{"25.66472222222222`", " ", "\[Degree]"}]], "Output",
 CellChangeTimes->{3.8418416863085613`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"e416a559-3fc7-45ba-892a-468e5e55f68c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"25.66472222222222`", " ", "\[Degree]"}]], "Input",ExpressionUUID->"447e01aa-53eb-4696-b6aa-4d41279c4f8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "S"}], "  ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], " ", "*", "2"}]}]], "Input",
 CellChangeTimes->{{3.842624695125512*^9, 3.842624704530429*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"7d1970b0-c98c-4fa1-b17b-a105e314f7de"],

Cell[BoxData["64.058`4.259293530552153"], "Output",
 CellChangeTimes->{3.842624706382771*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"7a7c4b2f-4016-463b-b193-db8f2a20f512"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"28", "/", "64"}]], "Input",
 CellChangeTimes->{{3.8426247213610067`*^9, 3.842624723409114*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"98748c0a-653c-458d-8094-f736668e6e99"],

Cell[BoxData[
 FractionBox["7", "16"]], "Output",
 CellChangeTimes->{3.842624724179433*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"225463bb-efe8-4ea9-a7fe-4295efd8e23b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["7", "16"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[12]:=",ExpressionUUID->"85bfd320-d67a-4756-9756-43a7eb526ddf"],

Cell[BoxData["0.4375`"], "Output",
 CellChangeTimes->{3.8426247266281357`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"048d436c-77f0-4735-87e2-d59d13a75027"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "C"}], "  ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "O"}], " ", "*", "2"}]}]], "Input",
 CellChangeTimes->{{3.842624765565003*^9, 3.8426247803505898`*^9}, {
  3.842624891793708*^9, 3.8426248956053143`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"00063b6c-6e03-43b3-9996-0e0cb152c87d"],

Cell[BoxData["44.009`5."], "Output",
 CellChangeTimes->{{3.842624768783731*^9, 3.842624781030785*^9}, 
   3.8426248961098413`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"6a9194e2-e6ce-4d6a-83fc-e35d6258ace1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"28", "/", "64"}], " ", "+", " ", 
  RowBox[{"63", "/", "44"}], " ", "+", " ", 
  RowBox[{"38", "/", "16"}]}]], "Input",
 CellChangeTimes->{{3.842624789934246*^9, 3.84262480131033*^9}, {
  3.8426249063429203`*^9, 3.842624907171617*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c83f91a6-7bc4-4295-83ca-ed3f048c8c9e"],

Cell[BoxData[
 FractionBox["747", "176"]], "Output",
 CellChangeTimes->{3.8426248020531883`*^9, 3.842624907818749*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"2fc3a970-aa58-4566-ad7f-afc827981af5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["747", "176"], "]"}]], "Input",
 CellChangeTimes->{3.842624911876911*^9},
 NumberMarks->False,
 CellLabel->"In[20]:=",ExpressionUUID->"c7e4828a-f8ee-4825-bea9-08eae7bfb4ae"],

Cell[BoxData["4.244318181818182`"], "Output",
 CellChangeTimes->{3.8426248045819817`*^9, 3.8426249126555367`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"a2ef2ea5-a1a8-422c-a383-4be38f62b2ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"28", "/", "64"}], " ", ")"}], " ", "/", " ", "4.2443"}]], "Input",\

 CellChangeTimes->{{3.842624867065907*^9, 3.842624872779346*^9}, {
  3.842624938301568*^9, 3.8426249454013777`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"50d1555c-9289-4b66-98a6-03ee3c564a6e"],

Cell[BoxData["0.10307942416888533`"], "Output",
 CellChangeTimes->{3.842624873522168*^9, 3.842624946782517*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"358edd40-ebdf-466f-b957-14602f1c7a41"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", " ", 
   RowBox[{"63", "/", "44"}], ")"}], " ", "/", "  ", "4.2443"}]], "Input",
 CellChangeTimes->{{3.842624961015218*^9, 3.8426249725369873`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"09ff5232-8350-44e6-a7e8-be956682debe"],

Cell[BoxData["0.3373508427345338`"], "Output",
 CellChangeTimes->{3.842624973362369*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"5b9ba3e1-7855-4036-a61c-42be5cdd2c10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"38", "/", "16"}], ")"}], " ", "/", " ", "4.2443"}]], "Input",
 CellChangeTimes->{{3.842625021490012*^9, 3.84262502626772*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"61b5d426-0a91-4899-85bd-85b2bba1fa35"],

Cell[BoxData["0.5595740169168061`"], "Output",
 CellChangeTimes->{3.842625026887335*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"1d45dc67-b413-44d9-a0b9-615bfc3ca735"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.10307`", " ", "+", " ", "0.33735`", " ", "+", " ", 
  "0.5595740169168061`"}]], "Input",
 CellChangeTimes->{{3.8426250759312153`*^9, 3.842625113923953*^9}},
 CellLabel->"",ExpressionUUID->"ebb62be7-bdb1-46c8-9a90-4e99285612e9"],

Cell[BoxData["1.0000042838202252`"], "Output",
 CellChangeTimes->{3.8426250878426237`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"08bd3e98-6387-49fe-a2a1-274fb0d68eb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{
   FractionBox["28", "64"], " ", "*", " ", "0.082", " ", "*", " ", "301.15"}],
   "9"]], "Input",
 CellChangeTimes->{{3.842625304587698*^9, 3.8426253200479603`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"c7c32da3-bc41-492c-bdad-fac393c8f12b"],

Cell[BoxData["1.200417361111111`"], "Output",
 CellChangeTimes->{3.842625320445654*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"8d9bc835-33aa-4c42-b234-5bafe1bccb17"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{
   FractionBox["63", "44"], " ", "*", " ", "0.082", " ", "*", " ", "301.15"}],
   "9"]], "Input",
 CellChangeTimes->{{3.842625338668193*^9, 3.842625342775003*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"453088ed-8c77-4a80-9d90-683beae4fee3"],

Cell[BoxData["3.9286386363636363`"], "Output",
 CellChangeTimes->{3.842625343498466*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"ec3d8bf8-7a3f-4d28-bf3a-3c62fd58b712"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{
   FractionBox["38", "16"], " ", "*", " ", "0.082", " ", "*", " ", "301.15"}],
   "9"]], "Input",
 CellChangeTimes->{{3.842625350780937*^9, 3.842625354877507*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"7259cba2-e936-4224-85ea-03ffa31270e6"],

Cell[BoxData["6.516551388888889`"], "Output",
 CellChangeTimes->{3.842625355605672*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"42d949b6-cfd2-4a64-9d27-5612ce586dd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1.20", " ", "+", " ", "3.92", " ", "+", " ", "6.51"}]], "Input",
 CellChangeTimes->{{3.842625452479911*^9, 3.842625466142993*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"63253a6f-6ca3-4535-b90f-dec5e95fc0b3"],

Cell[BoxData["11.629999999999999`"], "Output",
 CellChangeTimes->{3.842625466643629*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"d7517089-8517-40db-af8b-ec69332c3bb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "Cl"}], " ", "*", " ", "2"}]], "Input",
 CellChangeTimes->{{3.842626176658608*^9, 3.8426261843263083`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"251d48e6-5a45-48f4-8613-d66017350943"],

Cell[BoxData["70.9`4."], "Output",
 CellChangeTimes->{3.842626185123188*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"759be13e-e4d1-417f-906e-57bdd2a0f2d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "P"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "Cl"}], " ", "*", " ", "3"}]}]], "Input",
 CellChangeTimes->{{3.84262620690243*^9, 
  3.842626235461946*^9}},ExpressionUUID->"358cb11b-206e-443f-b048-\
140459a887e8"],

Cell[BoxData["137.323761998`4.111008185569537"], "Output",
 CellChangeTimes->{3.842626213731037*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"af3b25ae-c76f-491b-b3d9-7c06fbad2f0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "P"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@", "Cl"}], " ", "*", " ", "5"}]}]], "Input",
 CellChangeTimes->{{3.842626238567182*^9, 3.842626239257333*^9}, {
  3.8426267516142282`*^9, 3.84262675373532*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"3dfe4a70-cb45-49e0-a865-bf896bff2fd3"],

Cell[BoxData["208.2237619979999999999`4.069944037206548"], "Output",
 CellChangeTimes->{3.84262623972399*^9, 3.842626754711691*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"9489a26a-b51c-4943-a1cc-6d4ce10e66a7"]
}, Open  ]],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", 
  RowBox[{"(", 
   RowBox[{"3", "-", 
    SuperscriptBox["x", "2"]}], ")"}]]], "Input",
 CellChangeTimes->{{3.842648205091895*^9, 
  3.842648232506434*^9}},ExpressionUUID->"561f4e01-3ef2-45aa-9c44-\
cd2cc6d122bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "u"], 
  SuperscriptBox["\[ExponentialE]", "u"]}]], "Input",
 CellChangeTimes->{{3.842648258501861*^9, 3.842648285837841*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"8d74c668-89ae-4aa1-b77e-67013753d640"],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", "u"]], "Output",
 CellChangeTimes->{{3.842648262799672*^9, 3.842648286361272*^9}},
 CellLabel->"Out[37]=",ExpressionUUID->"2d8852ac-21c3-40cc-b250-500bfb1c2086"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "derivate  E^(3 - x^2) ", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Input", "Derivative", 1, 1, "Input", "D[E^(3 - x^2), x]"}, 
      "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[E^(3 - x^2), x]"}], 
       XMLElement["moutput", {}, {"-2 E^(3 - x^2) x"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "x"}]]], "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              RowBox[{
                RowBox[{"-", "2"}], " ", 
                SuperscriptBox["\[ExponentialE]", 
                 TagBox[
                  RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}], 
                  PolynomialForm[#, TraditionalOrder -> False]& ]], " ", 
                "x"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], ")"}]}]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], ")"}]}], "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["\[ExponentialE]", "u"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    HoldForm], TraditionalForm]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]}]}, "RowWithSeparators"], 
                    "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", "u"], ")"}]}], 
                    "\[LongEqual]", 
                    SuperscriptBox["\[ExponentialE]", "u"]}]}, 
                    "RowWithSeparators"], HoldForm], "\":\""}, "RowDefault"]},
                     "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}], ")"}]}], TraditionalForm], 
                    ")"}]}], TraditionalForm]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term \"", "\"and \"", "\"factor \"", 
                    "\"out \"", "\"constants:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "3", ")"}]}], TraditionalForm], "-", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "2"], ")"}]}], HoldForm]}], ")"}], 
                    FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"3", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "2"], ")"}]}], TraditionalForm], 
                    ")"}]}], "+", 
                    FrameBox[
                    "0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], ")"}]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "2"], ")"}]}], HoldForm], ")"}]}], 
                    HoldForm]}, "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Use \"", "\"the \"", "\"power \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "n"], ")"}]}], "\[LongEqual]", 
                    RowBox[{"n", " ", 
                    SuperscriptBox["x", 
                    RowBox[{"n", "-", "1"}]]}]}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"where \"", 
                    TemplateBox[{
                    RowBox[{"n", "\[LongEqual]", "2"}], "\".\"", "\"\\n\"", 
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"d/d", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SuperscriptBox["x", "2"], ")"}]}], "\[LongEqual]", 
                    RowBox[{"2", " ", "x"}]}]}, "RowDefault"]}, "RowDefault"],
                     "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]]}], "\" \""}, "RowDefault"], 
                    FrameBox[
                    RowBox[{"2", " ", "x"}], FrameStyle -> GrayLevel[0.8], 
                    FrameMargins -> 1, BaselinePosition -> Baseline, 
                    ContentPadding -> False, StripOnInput -> False]}, 
                    "RowDefault"]}, "RowDefault"]}, "RowDefault"], 
                    HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Input__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-2 E^(3 - x^2) x, {x, 0, 2.4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5671$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5670$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5671$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1769695$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5670$\
1769700$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5671$1769701$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5671$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5670$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1769695$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5670$\
1769700$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5671$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5671$\
1769701$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1769672[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$], 
                    (
                    Piecewise[{{
                    1.224744871391589 + 
                    1.309307341415954 Tan[1.5040801783846716` #], # < 0}}, 
                    1.224744871391589 + 
                    1.309307341415954 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$], 
                    0.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5671$$]], \

                    (Piecewise[{{
                    1.224744871391589 + 
                    1.309307341415954 Tan[1.5040801783846716` #], # < 0}}, 
                    1.224744871391589 + 
                    1.309307341415954 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5671$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$ + 
                    0.002449489742783178, 
                    CalculateUtilities`GraphicsUtilities`Private`max5671$$]], 
                    2.449489742783178]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5670$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5671$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 
                    All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1769672]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1769672[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1769672[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[
                    CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 1])
                    /CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNJgGfEACOhiTBpSkfK8XXxoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJnLNG1Z6TYkf3JhMuEcPYTHm8933m582Lbw2AsI2IMKKGftYXMM0\
U0pD0EumLNW07EN398UB4/FZzH8L0AkYC+\
Z71jRaiFkYJwzCf41ovN1G1MzBBBiaLnTpOT57DtBdooJqZjmOX4xtlkbbUFJmqqPTd3Sm7WKciHfx\
0fyNjF5D0uaXd2BIaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+\
bDTIs6dM/b90wLRZDuNp2zBgdmhrvFp7y/DbbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l02ZGWZEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5Mkn35o+JWcjnVZMj7vjAwBbVW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DY7RuOY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-2 E^(3 - x^2) x, {x, -6.1, 8.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5673$$ = 0.5, 
                 
                 CalculateUtilities`GraphicsUtilities`Private`min5672$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5673$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1769792$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5672$\
1769793$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5673$1769794$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5673$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5672$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1769792$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5672$\
1769793$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5673$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5673$\
1769794$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1769771[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$], 
                    (
                    Piecewise[{{
                    1.2247448713915885` + 
                    7.855844048495724 Tan[1.5040801783846716` #], # < 0}}, 
                    1.2247448713915885` + 
                    7.855844048495724 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$], \
-6.123724356957945], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5673$$]], \

                    (Piecewise[{{
                    1.2247448713915885` + 
                    7.855844048495724 Tan[1.5040801783846716` #], # < 0}}, 
                    1.2247448713915885` + 
                    7.855844048495724 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5673$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$ + 
                    0.014696938456699067`, 
                    CalculateUtilities`GraphicsUtilities`Private`max5673$$]], 
                    8.573214099741122]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5672$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5673$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, $CellContext`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat = \
$CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1769771]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1769771[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1769771[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RiogBg9Igw7GpAElKe+\
9JU5i4drBdrbBPw8+u0matasU0wGa0odTfWk+33333fUeHYkg6fd6PXXVmA+\
CxckWnh4aMxKzXBQ8fneaS6IUFTy5gs9uGRMSvUcY/CCx81035r2QM9Du/\
BrfBxYVDDT5qimjmhI13ZeQZzRStWcs6bH5yZSJCBj9SR4Pd1682nk5dDAYyxi0JpKrZ20h80yCIkk\
Pga4Z85YB/+aOD8rjp4KxkHwvCI+Ium+\
8EwmxgREcGObjfevlZuoOJqaBxyDjC6fJynPU9gKlJeXphMxyfON8soZtgUGmynFzt+RmnYJc+\
DfwgQhtTM5jk7ZnS6BfGJeMvrOy+ufcDfC82xZeipPVxGF+\
bxjyBpoeE7VM55PWdXKMVF1ro59zdVHzZaNBnj9l6v+lQ6r0chhP24ZBZkemxqu1twz/vC28yLHr5+\
K+Z8xn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIzbFd8hOn0qWOEEJs6yX2x/\
bFfg9aYQYu2mG5AOr2dAQHJiXLHldo+mVI8ykBAZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ShbqDjrIvf1TcSi5nmgx5P+\
CapESuFf1NrI805PJ4IjwjCfGCpl69OaySGoP0lv2gBAlz4BQh6S/zsd/\
cw8VKIFX7EtUlHYsDW5pT/yT6ZYEPCU911tyxPUeXd9tiNoE4qVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwGbTLjW"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Root", "numsubpods" -> "1", 
     "position" -> "300", "primary" -> "true", "scanner" -> "Reduce", "title" -> 
     "Root"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-2 E^(3 - x^2) x == 0, x, Reals]"}], 
       
       XMLElement["moutput", {}, {"x == 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", "0"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "PropertiesAsARealFunction", 
     "numsubpods" -> "3", "position" -> "400", "scanner" -> 
     "FunctionProperties", "title" -> "Properties as a real function"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[D[E^(3 - x^2), x], x]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{}, "Reals"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[D[E^(3 - x^2), x], x, y]"}], 
       XMLElement[
       "moutput", {}, {
        "-(Sqrt[2] E^(5/2)) \[LessEqual] y \[LessEqual] Sqrt[2] E^(5/2)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{
                RowBox[{
                  RowBox[{"-", 
                    SqrtBox["2"]}], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"5", "/", "2"}]]}], "\[LessEqual]", "y", 
                "\[LessEqual]", 
                RowBox[{
                  SqrtBox["2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"5", "/", "2"}]]}]}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement[
       "minput", {}, {
        "Simplify[-2 E^(3 - x^2) x == -(-2 E^(3 - (-x)^2) (-x))]"}], 
       XMLElement["moutput", {}, {"True"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"odd\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "PropertiesAsARealFunction__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "SeriesExpansionAtx=0.", "numsubpods" -> 
     "1", "position" -> "500", "scanner" -> "Series", "title" -> 
     "Series expansion at x = 0"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-2 E^(3 - x^2) x, {x, 0, 4}]"}], 
       XMLElement[
       "moutput", {}, {
        "SeriesData[x, 0, {-2 E^3, 0, 2 E^3, 0, -E^3, 0, E^3/3}, 1, 9, 1]"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", "3"], " ", "x"}]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", "3"], " ", 
                    SuperscriptBox["x", "3"]}], "-", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", "3"], " ", 
                    SuperscriptBox["x", "5"]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", "3"], " ", 
                    SuperscriptBox["x", "7"]}], "3"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "9"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 1, 9, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", "3"]}], ",", "0", ",", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", "3"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    SuperscriptBox["\[ExponentialE]", "3"]}], ",", "0", ",", 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", "3"], "3"]}], "}"}], 
                    ",", "1", ",", "9", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "IndefiniteIntegral", "numsubpods" -> 
     "1", "position" -> "600", "primary" -> "true", "scanner" -> "Integral", 
     "title" -> "Indefinite integral"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[D[E^(3 - x^2), x], x]"}], 
       XMLElement["moutput", {}, {"E^(3 - x^2)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "GlobalMaximum", "numsubpods" -> "1", 
     "position" -> "700", "scanner" -> "GlobalExtrema", "title" -> 
     "Global maximum"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Maximize[-2 E^(3 - x^2) x, x]"}], 
       XMLElement["moutput", {}, {"{Sqrt[2] E^(5/2), {x -> -(1/Sqrt[2])}}"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"max", "\[NoBreak]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], "}"}]}], 
                "\[LongEqual]", 
                RowBox[{
                  SqrtBox["2"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"5", "/", "2"}]]}]}], 
              StyleBox["\" at \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{
                TagBox["x", HoldForm], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox["1", 
                   SqrtBox["2"]]}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "GlobalMaximum__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMaximum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "GlobalMinimum", "numsubpods" -> "1", 
     "position" -> "800", "scanner" -> "GlobalExtrema", "title" -> 
     "Global minimum"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[-2 E^(3 - x^2) x, x]"}], 
       XMLElement["moutput", {}, {"{-(Sqrt[2] E^(5/2)), {x -> 1/Sqrt[2]}}"}], 
       
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"min", "\[NoBreak]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], "}"}]}], 
                "\[LongEqual]", 
                RowBox[{
                  RowBox[{"-", 
                    SqrtBox["2"]}], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"5", "/", "2"}]]}]}], 
              StyleBox["\" at \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{
                TagBox["x", HoldForm], "\[LongEqual]", 
                FractionBox["1", 
                 SqrtBox["2"]]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "GlobalMinimum__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMinimum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Limit", "numsubpods" -> "1", 
     "position" -> "900", "scanner" -> "GlobalExtrema", "title" -> "Limit"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[-2 E^(3 - x^2) x, {x -> -Infinity, x -> Infinity}]"}], 
       XMLElement["moutput", {}, {"{0, 0}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TemplateBox[{
                 RowBox[{
                   RowBox[{"-", "2"}], " ", 
                   SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], "x", 
                 RowBox[{"\[PlusMinus]", "\[Infinity]"}]}, "Limit2Arg", 
                SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], HoldForm], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Definite integrals", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "950", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"NIntegrate[-2 E^(3 - x^2) x, {x, 0, Infinity}]"}], 
       XMLElement["moutput", {}, {"-20.0855"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                TagBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                "\[TildeTilde]", 
                RowBox[{"-", "20.08553692318769`"}]}], "\"\[Ellipsis]\""}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "NIntegrate[-2 E^(3 - x^2) x, {x, -Sqrt[3], Infinity}]"}], 
       XMLElement["moutput", {}, {"-1.000000000000"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                TagBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", 
                    RowBox[{"-", 
                    SqrtBox["3"]}], "\[Infinity]"], 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                "\[TildeTilde]", 
                
                RowBox[{
                 "-", "0.99999999999999977795539507496869191527`14."}]}], 
              "\"\[Ellipsis]\""}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"NIntegrate[-2 E^(3 - x^2) x, {x, 0, Sqrt[3]}]"}], 
       XMLElement["moutput", {}, {"-19.0855"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                TagBox[
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", 
                    SqrtBox["3"]], 
                   RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                "\[TildeTilde]", 
                RowBox[{"-", "19.085536923187682`"}]}], "\"\[Ellipsis]\""}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DefiniteIntegral__More digits"}, {}]}]}], Typeset`pod11$$ = 
   XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.2657291189694254, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.2657291189694254, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, 
                 CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.2657291189694254, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.2657291189694254, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.2657291189694254, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.507098504392337, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.9652516631899266, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.507098504392337, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.9652516631899266, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.2657291189694254, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.2657291189694254, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.2657291189694254, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.2657291189694254, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.2657291189694254, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1554153$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1554158$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1554159$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$1554160$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$1554161$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$1554162$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$1554163$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$1554164$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$1554165$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$1554166$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
1554167$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
1554168$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$1554169$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$1554170$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.2657291189694254, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.2657291189694254, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.2657291189694254, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.2657291189694254, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.2657291189694254, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.507098504392337, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.9652516631899266}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1554153$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1554158$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1554159$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$1554160$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$1554161$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$1554162$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$1554163$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$1554164$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$1554165$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$1554166$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
1554167$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
1554168$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
1554169$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$1554170$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    7.348469228349534/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    3.674234614174767], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    3.674234614174767]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(((-2) E^(3 - $CellContext`x^2)) $CellContext`x) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = 
                    E^Compile`$420; (-2) Compile`$421 + (4 Compile`$421) 
                    Compile`$417]], Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    3.674234614174767]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = 
                    E^Compile`$420; (-2) Compile`$421 + (4 Compile`$421) 
                    Compile`$417]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    3.674234614174767], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = 
                    E^Compile`$420; (-2) Compile`$421 + (4 Compile`$421) 
                    Compile`$417]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 3.674234614174767], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{-8, {2, 0, 2}}, {12, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 8, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 0, 5}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 6}, {10, 
                    2, 7}, {16, 7, 4, 6, 7}, {13, 5, 7, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$422, Compile`$423, Compile`$424, 
                    Compile`$425}, Compile`$422 = $CellContext`x^2; 
                    Compile`$423 = -Compile`$422; 
                    Compile`$424 = 3 + Compile`$423; 
                    Compile`$425 = E^
                    Compile`$424; (12 Compile`$425) $CellContext`x - (8 
                    Compile`$425) $CellContext`x^3]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{-8, {2, 0, 2}}, {12, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 8, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 0, 5}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 6}, {10, 
                    2, 7}, {16, 7, 4, 6, 7}, {13, 5, 7, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$422, Compile`$423, Compile`$424, 
                    Compile`$425}, Compile`$422 = $CellContext`x^2; 
                    Compile`$423 = -Compile`$422; 
                    Compile`$424 = 3 + Compile`$423; 
                    Compile`$425 = E^
                    Compile`$424; (12 Compile`$425) $CellContext`x - (8 
                    Compile`$425) $CellContext`x^3]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{-8, {2, 0, 2}}, {12, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 8, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 0, 5}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 6}, {10, 
                    2, 7}, {16, 7, 4, 6, 7}, {13, 5, 7, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$422, Compile`$423, Compile`$424, 
                    Compile`$425}, Compile`$422 = $CellContext`x^2; 
                    Compile`$423 = -Compile`$422; 
                    Compile`$424 = 3 + Compile`$423; 
                    Compile`$425 = E^
                    Compile`$424; (12 Compile`$425) $CellContext`x - (8 
                    Compile`$425) $CellContext`x^3]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 5, 6, 5}, {
                    1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], 1} ((1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{-8, {2, 0, 2}}, {12, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 8, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 0, 3}, {
                    13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10, 1, 5}, {16,
                     5, 4, 0, 5}, {41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 6}, {10, 
                    2, 7}, {16, 7, 4, 6, 7}, {13, 5, 7, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    Block[{Compile`$422, Compile`$423, Compile`$424, 
                    Compile`$425}, Compile`$422 = $CellContext`x^2; 
                    Compile`$423 = -Compile`$422; 
                    Compile`$424 = 3 + Compile`$423; 
                    Compile`$425 = 
                    E^Compile`$424; (12 Compile`$425) $CellContext`x - (8 
                    Compile`$425) $CellContext`x^3]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(((-2) E^(3 - $CellContext`x^2)) $CellContext`x) == 
                    0, $CellContext`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x, \
$CellContext`x]^2], CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 3.674234614174767]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 3.674234614174767], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = 
                    Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    With[{
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$\
 === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]))/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2)) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x])) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x))/(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2)) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`x - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x]} + {((-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, (-2) 
                    E^(3 - $CellContext`x^2) + (4 
                    E^(3 - $CellContext`x^2)) $CellContext`x^2][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, (-2) 
                    E^(3 - $CellContext`x^2) + (4 
                    E^(3 - $CellContext`x^2)) $CellContext`x^2][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-2, {2, 0, 0}}, {3, {2, 0, 1}}}, {0, 2, 3, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {10, 1, 1}, {
                    13, 1, 2, 1}, {40, 32, 3, 0, 1, 3, 0, 2}, {10, 0, 1}, {16,
                     1, 2, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, ((-2) 
                    E^(3 - $CellContext`x^2)) $CellContext`x], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    5}}, {{4, {2, 0, 2}}, {-2, {2, 0, 1}}, {3, {2, 0, 0}}}, {
                    0, 3, 7, 0, 0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {19, 1, 2}, {
                    10, 0, 3}, {13, 3, 2, 3}, {40, 32, 3, 0, 3, 3, 0, 4}, {10,
                     1, 5}, {16, 5, 4, 5}, {10, 2, 6}, {16, 6, 4, 1, 6}, {13, 
                    5, 6, 5}, {1}}, 
                    Function[{$CellContext`x}, 
                    
                    Block[{Compile`$417, Compile`$419, Compile`$420, 
                    Compile`$421}, Compile`$417 = $CellContext`x^2; 
                    Compile`$419 = -Compile`$417; 
                    Compile`$420 = 3 + Compile`$419; 
                    Compile`$421 = E^Compile`$420; (-2) 
                    Compile`$421 + (4 Compile`$421) Compile`$417]], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    RowBox[{"-", "2"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "-", 
                    SuperscriptBox["x", "2"]}]], " ", "x"}], 
                    TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.507098504392337, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.9652516631899266, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, True,
                     "symmetric"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.2657291189694254, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.2657291189694254, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.2657291189694254, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.2657291189694254, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.2657291189694254, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {
                    "negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RuroHpGADsakASUp7/\
WSS2Lh2sF2tsE/Dz67SZq1qxTTAZrSh1N9aT7ffffd9Z6diCDp93o9ddOYD4LFyQ6enhozFvNcFDx+\
d55LUIoKntzAZ/eMCUEfACM/IHa+28a8F3JOtDu/\
wvcJiwpGNHzVlFFNQc0OJckzGqnaM5H01PxkxkREGP0Jz4f7+6PhaM/\
BYCwTojVIrl62hcwzSRQkPQS6ZcxbRvg3d3xSHj8VjIXwvQAegXpsvFNJYgMjOGGYj/\
et15upB5iYJjwmMr5ymqw8x20vUFpSnk5hnuMbl5M1bAtMZKocNw9LbjYpyIV/Bx+\
I0MbkPDZpe7YE+oVxzei7KKt/zt0Az6/\
bwktxtp44zO8NQ96IpqegVul80bpOjpGqa230C66uar5sNcjLp0z9v3RMlV4NY69tGDA/MTVer71V+\
FFbeJFj1y/E/ciYz85RAq4bDpXgPoq4YIsomikPnETbp6ty43AY9yu+Q3T6VLDCCUycZb/Y/\
titwOtNIcTazbYgHV7PgAByMK7YcntAU6rHGZEkMsCL6/\
plk01FHYrHne1rT3lMzQBzhGxantAcJUt1JzrKvvxRcSu5XGgy5P2Ia0hBbhT9XayPNOTyeCo8Iwnx\
gqZevTmskpoQ6S37QQkS5oRThKS/zMd+cw+XK4FUHUpUl3QsDmxpzv2T6JcFPgae6qy5Y3uOLu+\
2xWwCcVarLqBJsjxttsd0v8l044bmQPclwbck/\
gO92xS6TeGvbgore3C3JnRrQrcmdGtCtyb8v2uCjRj/lX4Dg3m4Tg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"async" -> 
     "https://www4b.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa4789191gf2764678ah010000271cc492f0f7671g1465566624282479354", "error" -> 
     "false", "id" -> "DifferentialEquationSolutionCurveFamilies", 
     "numsubpods" -> "0", "position" -> "1100", "scanner" -> "Plotter", 
     "title" -> "Differential equation solution curve families", 
     "asyncfailed" -> "data not found", "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"async" -> 
     "https://www4b.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa4790191gf2764678ah0100001173d1ii5f1102971465566624282479354", "error" -> 
     "false", "id" -> "InverseIterations", "numsubpods" -> "0", "position" -> 
     "1200", "scanner" -> "Plotter", "title" -> "Inverse iterations", 
     "asyncfailed" -> "data not found", "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, 
   Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, Typeset`pod41$$, 
   Typeset`pod42$$, Typeset`aux1$$ = {True, False, {False, False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux11$$ = {True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`aux42$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "12", "datatypes" -> "D", "timedout" -> 
     "InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "4.314", "parsetiming" -> "0.486", "parsetimedout" -> "false", 
     "recalculate" -> 
     "https://www4b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa4784191gf2764678ah0100003de17gg6i8e8ghfd1465566624282479354", "id" -> 
     "MSP4785191gf2764678ah01000051fha12a5f5bc6ff", "host" -> 
     "https://www4b.wolframalpha.com", "server" -> "42", "related" -> 
     "https://www4b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa4786191gf2764678ah0100003cf1h8d9b7f5d0fb1465566624282479354", "version" -> 
     "2.6", "inputstring" -> "derivate  E^(3 - x^2)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "D", "timedout" -> 
     "InterestingDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "4.583", "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", 
     "parseidserver" -> "15", "host" -> "https://www4b.wolframalpha.com", 
     "server" -> "15", "related" -> "", "version" -> "2.6", "inputstring" -> 
     "derivate  E^(3 - x^2)"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2021, 10, 7, 21, 21, 14.977744`7.92802138868246}, "Line" -> 39,
     "SessionID" -> 32326229299238223480}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
   35, 36, 37, 38, 39, 40, 41, 42}, Typeset`chosen$$ = {
   "Input", "Derivative", 1, 1, "Input", "D[E^(3 - x^2), x]"}, 
   Typeset`open$$ = True, Typeset`newq$$ = "derivate  E^(3 - x^2) "}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$, Typeset`pod42$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$, Typeset`aux42$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {3221., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$, Typeset`pod42$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$, Typeset`aux42$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www4b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa4784191gf2764678ah0100003de17gg6i8e8ghfd1465566624282479354", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[39]:=",ExpressionUUID->"4a0477d3-ff13-41eb-a87d-15a74ea15014"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "2"}], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"3", "-", 
    SuperscriptBox["x", "2"]}]], " ", "x"}]], "Output",
 CellChangeTimes->{3.842648434634742*^9, 3.842648475226087*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"e3df0aa6-f8c3-45a0-a2f2-10c9e4fde4ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", "x"}]], "x"}], " ", "-", " ", 
  RowBox[{"2", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", "x"}]]}]}]], "Input",
 CellChangeTimes->{{3.842649274236229*^9, 3.842649286293178*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"3d86361b-bbd6-4872-99ce-e0ec45b2419e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "2"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "x"}]]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "x"}]], " ", "x"}]}]], "Output",
 CellChangeTimes->{3.842649287493166*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"7445b53c-a7cd-4ee1-9948-5ff4a2725c03"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "x"], 
  RowBox[{"(", 
   SuperscriptBox["2", 
    RowBox[{
     SuperscriptBox["x", "2"], "-", "1"}]], ")"}]}]], "Input",
 CellChangeTimes->{{3.842649309035603*^9, 3.842649333673189*^9}, {
  3.8426494722366667`*^9, 3.842649484019513*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"5911c6ae-53d1-472f-a298-da2cd11063a1"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", 
   SuperscriptBox["x", "2"]], " ", "x", " ", 
  RowBox[{"Log", "[", "2", "]"}]}]], "Output",
 CellChangeTimes->{3.842649334162067*^9, 3.842649487152954*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"e7ca166b-739e-445c-975f-9590529275b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", 
   SuperscriptBox["3", "2"]], " ", "3", " ", 
  RowBox[{"Log", "[", "2", "]"}], " "}]], "Input",
 CellChangeTimes->{{3.8426495746705437`*^9, 3.842649627942235*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"b5f28bb8-3b1a-4dc0-bd60-92a82e985e62"],

Cell[BoxData[
 RowBox[{"1536", " ", 
  RowBox[{"Log", "[", "2", "]"}]}]], "Output",
 CellChangeTimes->{{3.842649612753211*^9, 3.842649628508627*^9}},
 CellLabel->"Out[44]=",ExpressionUUID->"51551594-a532-4c07-96f0-c8d00b8ed691"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"2", "*", "3", "*", 
   SuperscriptBox["2", 
    RowBox[{
     RowBox[{"3", "^", "2"}], "-", "1"}]]}]}]], "Input",
 CellLabel->"In[45]:=",ExpressionUUID->"7a9beaa4-6117-4558-a4ea-3264a717d657"],

Cell[BoxData["1536"], "Output",
 CellChangeTimes->{3.842649640996879*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"b8e14656-eed8-4bc7-82ff-4ecfbe7b93fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "x"], 
  RowBox[{"(", 
   RowBox[{"Log", "[", 
    RowBox[{"2", ",", 
     RowBox[{"5", "+", 
      RowBox[{"4", "x"}]}]}], "]"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.842690993209663*^9, 3.84269100628891*^9}, {
  3.842691187973218*^9, 3.842691195312471*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"5e8cad21-3a9e-47fb-9328-e9a5570d43c9"],

Cell[BoxData[
 FractionBox["4", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"5", "+", 
     RowBox[{"4", " ", "x"}]}], ")"}], " ", 
   RowBox[{"Log", "[", "2", "]"}]}]]], "Output",
 CellChangeTimes->{3.842691007527404*^9, 3.84269119626604*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"8966ed77-4a15-4f40-a495-d363c20c7e46"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "H"}], " ", "+", " ", 
  RowBox[{"e", "@", "Cl"}]}]], "Input",
 CellChangeTimes->{{3.8433188138310537`*^9, 3.843318821871704*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"1a2f318e-f4ca-4c82-9a95-e4b3b9b1c799"],

Cell[BoxData["36.458`4."], "Output",
 CellChangeTimes->{3.843318836789935*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"9ed1a955-6f82-4be6-b0b1-2e4983bc7542"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1.18", "  ", "*", " ", 
  FractionBox["1000", "1"], "*", 
  FractionBox["36", "100"], "*", 
  FractionBox["1", "36.46"]}]], "Input",
 CellChangeTimes->{{3.843318859918105*^9, 3.8433188996226683`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"889dd9cb-accc-4c71-9fa1-8e2229d65938"],

Cell[BoxData["11.651124520021941`"], "Output",
 CellChangeTimes->{3.84331890042325*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"b5288d00-baac-44e7-8dd1-8db880c8417f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "@", "H"}], " ", "+", " ", 
  RowBox[{
   RowBox[{"e", "@"}], " ", "*", " ", "1"}]}]], "Input",
 CellChangeTimes->{{3.843319286614456*^9, 
  3.843319344486825*^9}},ExpressionUUID->"fe328d0d-ce31-4164-8c8f-\
6a8e94ecdb89"],

Cell[BoxData["74.5483`4.318057831828014"], "Output",
 CellChangeTimes->{{3.843319294086376*^9, 3.843319326187046*^9}},
 CellLabel->"Out[81]=",ExpressionUUID->"e09be0de-9530-432c-871d-97b733f23753"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1.8", " ", "*", "  ", "162.2"}]], "Input",
 CellChangeTimes->{{3.843319401448326*^9, 3.843319409922081*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"482509a5-665d-4daa-94ef-489b5e2efd9f"],

Cell[BoxData["291.96`"], "Output",
 CellChangeTimes->{3.8433194109452333`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"bb87d824-abe8-47b7-bf55-99ad3ccc03b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"0.6", " ", "*", " ", "74.55"}]], "Input",
 CellChangeTimes->{{3.843319496901965*^9, 3.8433195012354937`*^9}, {
  3.843319540407907*^9, 3.843319543314879*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"dc83df90-8529-46d7-91a3-ea681b847869"],

Cell[BoxData["44.73`"], "Output",
 CellChangeTimes->{3.843319501838572*^9, 3.8433195442514753`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"bcd98b64-fca4-4938-8379-a7751781ca0c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.843322857398439*^9, 3.8433228606286182`*^9}, {
  3.8433256326025257`*^9, 
  3.8433256526659193`*^9}},ExpressionUUID->"b49d206f-8d8c-4c33-9bd2-\
eac55edb6bdc"]
},
WindowSize->{1680, 997},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->Association["TryRealOnly" -> False],
FrontEndVersion->"12.3 for Mac OS X x86 (64-bit) (June 19, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"4ba6864c-48a8-4b3a-8d63-554585d8470f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 154, 3, 30, "Input",ExpressionUUID->"b1875b3c-815e-4b2f-8a03-be1dc5db4f43"],
Cell[715, 25, 6141, 139, 483, "Code",ExpressionUUID->"f3bba0cc-341a-442b-90c9-14e8c6e56816"],
Cell[6859, 166, 144, 3, 35, "Text",ExpressionUUID->"241137b1-4b30-45d4-acc1-e3cb8a743b8c"],
Cell[CellGroupData[{
Cell[7028, 173, 544, 11, 33, "Input",ExpressionUUID->"c270f0a0-ae4f-41f2-b61c-d3240af0d765"],
Cell[7575, 186, 922, 15, 46, "Print",ExpressionUUID->"7b542557-0558-453d-9ba6-0ff8bb749c23"],
Cell[8500, 203, 1016, 15, 34, "Output",ExpressionUUID->"e0217faa-ae4e-4dee-9e93-99a683fe57b7"],
Cell[9519, 220, 279, 6, 36, "Output",ExpressionUUID->"c8540196-598a-4d63-88d6-4a3714b4bbf3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9835, 231, 384, 8, 30, "Input",ExpressionUUID->"bc6b88c5-a3c8-4b01-8c7f-bc19036b9824"],
Cell[10222, 241, 329, 8, 36, "Output",ExpressionUUID->"14fb2083-cbe5-482d-83e6-044414c6d858"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10588, 254, 265, 7, 30, "Input",ExpressionUUID->"ff3884b9-3573-483f-b614-3ee9ab9f3501"],
Cell[10856, 263, 161, 3, 34, "Output",ExpressionUUID->"3a8a730c-ecae-464e-8599-aa13e4f3d5de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11054, 271, 322, 8, 30, "Input",ExpressionUUID->"cba4915c-0e5c-455f-994b-b5c29dfc707d"],
Cell[11379, 281, 233, 4, 34, "Output",ExpressionUUID->"2796cebe-bd11-40e3-bb0e-0dd8bc409603"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11649, 290, 247, 5, 30, "Input",ExpressionUUID->"6c139330-e451-426c-8a55-fb7e2c60452c"],
Cell[11899, 297, 179, 4, 51, "Output",ExpressionUUID->"3f9ce1ad-b6d3-4d1a-997a-e34e420e984a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12115, 306, 183, 5, 48, "Input",ExpressionUUID->"7d19f75c-7bd8-4277-94ad-302b3eb7eb1b"],
Cell[12301, 313, 170, 3, 34, "Output",ExpressionUUID->"7776a52b-0afb-4d74-97f6-1f009d063ae9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12508, 321, 253, 5, 30, "Input",ExpressionUUID->"4582c969-8a58-4a5e-bfc2-dc7c2a13e4bd"],
Cell[12764, 328, 168, 3, 34, "Output",ExpressionUUID->"a4cfa425-bcb6-4236-82d6-7d549a73c61b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12969, 336, 263, 5, 30, "Input",ExpressionUUID->"a99c89c7-2909-4a82-8ee0-337dee6c8b07"],
Cell[13235, 343, 258, 4, 34, "Output",ExpressionUUID->"3edbd2e5-2fc9-4def-9d30-1b1be8b9e674"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13530, 352, 279, 7, 30, "Input",ExpressionUUID->"4d4bfb0b-f948-4235-8934-41bcf92ecd31"],
Cell[13812, 361, 226, 4, 34, "Output",ExpressionUUID->"4a0e38fc-9aec-4c60-871e-05482e806192"]
}, Open  ]],
Cell[14053, 368, 153, 3, 30, "Input",ExpressionUUID->"e4f1a6ed-0e1c-4870-842b-ec673bd64111"],
Cell[CellGroupData[{
Cell[14231, 375, 219, 4, 30, "Input",ExpressionUUID->"be6a1c5e-c808-43d8-95ba-0536ec98d07e"],
Cell[14453, 381, 199, 3, 34, "Output",ExpressionUUID->"6d52691d-84f9-4021-bfb2-86473efa7c8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14689, 389, 374, 8, 30, "Input",ExpressionUUID->"5e0f62c2-bdf4-4734-beca-a7ba6239b95c"],
Cell[15066, 399, 393, 7, 24, "Print",ExpressionUUID->"5d837458-06a6-4259-a90d-d404a49bbdb4"],
Cell[15462, 408, 260, 5, 34, "Output",ExpressionUUID->"5a0c0ccd-dc09-42ec-a962-4a5bf0183000"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15759, 418, 304, 7, 30, "Input",ExpressionUUID->"82e1ebbd-1bfa-4996-84d8-3e87578b38b8"],
Cell[16066, 427, 364, 6, 24, "Print",ExpressionUUID->"7275b4a6-0711-45f2-b18e-1839d122d55e"],
Cell[16433, 435, 236, 4, 34, "Output",ExpressionUUID->"f184cb9d-6af7-4459-b4f0-cf4707a0356c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16706, 444, 257, 5, 30, "Input",ExpressionUUID->"6fbc007d-1f19-4f89-a8c5-0170a142a268"],
Cell[16966, 451, 174, 3, 34, "Output",ExpressionUUID->"25f617cb-68ea-48a4-b903-9c7b1199d4e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17177, 459, 183, 3, 30, "Input",ExpressionUUID->"876d1125-364a-483d-b085-86977636584c"],
Cell[17363, 464, 174, 3, 34, "Output",ExpressionUUID->"ea239769-7411-42e9-b934-a95e2a9bb64a"]
}, Open  ]],
Cell[17552, 470, 207, 5, 33, "Input",ExpressionUUID->"df5c8862-77e5-4d8f-9fd9-7da1ad61bdc0"],
Cell[CellGroupData[{
Cell[17784, 479, 267, 6, 30, "Input",ExpressionUUID->"98d98e25-dae0-45d4-a373-aca7c04cadff"],
Cell[18054, 487, 175, 3, 34, "Output",ExpressionUUID->"c38dbd45-3671-450a-9a8e-1beae08bc741"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18266, 495, 689, 18, 73, "Input",ExpressionUUID->"cd6e7bb1-2d0b-45f8-b388-d744ca929c16"],
Cell[18958, 515, 423, 7, 24, "Print",ExpressionUUID->"dbd3eff6-70b2-4019-a084-ca9ba9c8232c"],
Cell[19384, 524, 284, 5, 34, "Output",ExpressionUUID->"120f01b2-142b-4eee-b5a1-0f4f7bd0ceeb"],
Cell[19671, 531, 420, 7, 24, "Print",ExpressionUUID->"0c856dd3-c2ec-4ab3-a873-886159759153"],
Cell[20094, 540, 286, 5, 34, "Output",ExpressionUUID->"d4fc9e5a-0c7f-44c8-b064-5b81d7cf382b"],
Cell[20383, 547, 420, 7, 24, "Print",ExpressionUUID->"56a73c8e-afdb-4f83-bfa4-54e530d75fd4"],
Cell[20806, 556, 282, 5, 34, "Output",ExpressionUUID->"dc14f8bf-99ef-4f2d-b1e5-ad9abbd70164"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21125, 566, 303, 7, 33, "Input",ExpressionUUID->"99b56a65-a1fc-41c0-a87f-1134b67a6a66"],
Cell[21431, 575, 335, 6, 46, "Print",ExpressionUUID->"9f09161c-8701-422a-9456-128bff5936c1"],
Cell[21769, 583, 251, 5, 34, "Output",ExpressionUUID->"7f06d9de-d4cd-4334-96cf-6d23adc54850"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22057, 593, 200, 4, 30, "Input",ExpressionUUID->"b7ef4e6a-d4d5-47cb-a7e9-89b08112b10f"],
Cell[22260, 599, 162, 3, 34, "Output",ExpressionUUID->"afccec4a-5e75-470f-9dad-125356a32a30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22459, 607, 325, 8, 33, "Input",ExpressionUUID->"a21740d4-326f-466a-be11-ba27e5514174"],
Cell[22787, 617, 331, 6, 44, "Print",ExpressionUUID->"32908e0a-5ded-48f1-9d03-303564ab52c0"],
Cell[23121, 625, 210, 4, 34, "Output",ExpressionUUID->"a6ef5537-85f4-4141-832c-b25bbfcd5050"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23368, 634, 200, 4, 30, "Input",ExpressionUUID->"a9931248-140a-49dd-b3aa-503a9613152b"],
Cell[23571, 640, 184, 3, 34, "Output",ExpressionUUID->"3286f840-1868-44e2-8e4f-e85a5faaf01f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23792, 648, 270, 6, 52, "Input",ExpressionUUID->"50604bfe-13d4-49fc-b1b9-ff2a1c9f1e0c"],
Cell[24065, 656, 175, 3, 34, "Output",ExpressionUUID->"9ee40c6f-ff74-44b0-80f0-adf1d1a32203"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24277, 664, 297, 7, 30, "Input",ExpressionUUID->"6709d5eb-46ba-48b6-b44a-11fa9ac2f9d9"],
Cell[24577, 673, 201, 3, 34, "Output",ExpressionUUID->"245e5f5d-9430-440f-bcd9-c45384e16343"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24815, 681, 200, 4, 30, "Input",ExpressionUUID->"3e11afce-4ca1-4cdb-9f6b-34d0b0269601"],
Cell[25018, 687, 161, 3, 34, "Output",ExpressionUUID->"1d189880-dd70-4e46-8cac-570b876c3bc3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25216, 695, 198, 4, 30, "Input",ExpressionUUID->"9ebbe846-4ba3-4f40-b2ae-dc63dd9c44ed"],
Cell[25417, 701, 161, 3, 34, "Output",ExpressionUUID->"7d4e52e0-9e8c-4d81-b115-8458b4881a24"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25615, 709, 200, 4, 30, "Input",ExpressionUUID->"8f56042f-97f9-43b8-a825-9e88332ad692"],
Cell[25818, 715, 160, 3, 34, "Output",ExpressionUUID->"b07f2cb2-d7bc-45cf-850e-faf10a0e1cf4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26015, 723, 200, 4, 30, "Input",ExpressionUUID->"9f2d2f38-31f7-4f6d-89d3-ccf9866ab50a"],
Cell[26218, 729, 201, 4, 50, "Output",ExpressionUUID->"95427121-2a33-4deb-ba32-edd44e7ca84c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26456, 738, 181, 5, 47, "Input",ExpressionUUID->"6c1276f3-ed50-4d89-88ba-9e0326335eee"],
Cell[26640, 745, 169, 3, 34, "Output",ExpressionUUID->"2c4cf6b4-9395-4d85-beff-25eb64ace449"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26846, 753, 198, 4, 30, "Input",ExpressionUUID->"4a319255-4fe7-4c41-9afa-adc04e883f36"],
Cell[27047, 759, 160, 3, 34, "Output",ExpressionUUID->"68464285-eb73-4e0a-ab23-1df13ac3e42c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27244, 767, 204, 4, 30, "Input",ExpressionUUID->"59d3fa2d-17ab-4350-bb40-5245085ab552"],
Cell[27451, 773, 184, 3, 34, "Output",ExpressionUUID->"efa66c9b-5e28-472f-9bf5-8ca34706b536"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27672, 781, 330, 8, 30, "Input",ExpressionUUID->"7dabc6cc-7a33-453c-a716-dfbcbc8b343e"],
Cell[28005, 791, 223, 4, 34, "Output",ExpressionUUID->"0f099867-d31d-470c-806a-17dc2189a8d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28265, 800, 201, 4, 30, "Input",ExpressionUUID->"cda18171-3984-4c21-9cb1-14bb64181146"],
Cell[28469, 806, 156, 3, 34, "Output",ExpressionUUID->"d3ecba0c-423e-4547-9879-337562697d5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28662, 814, 170, 4, 30, "Input",ExpressionUUID->"622dd739-96d8-4886-afa0-cf1418cc2c45"],
Cell[28835, 820, 403, 10, 34, "Output",ExpressionUUID->"9b8493d4-b338-46f3-ba97-d768588b1ad3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29275, 835, 384, 8, 30, "Input",ExpressionUUID->"284f1489-357f-492e-9132-d90e74e8149e"],
Cell[29662, 845, 179, 3, 34, "Output",ExpressionUUID->"bda9c646-7db3-4ef2-96fa-57f5c22e8638"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29878, 853, 706, 19, 30, "Input",ExpressionUUID->"237d564c-373f-4689-a05d-c6309544287e"],
Cell[30587, 874, 604, 17, 50, "Output",ExpressionUUID->"70566ae7-c757-42ba-8353-be65e3fe4f0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31228, 896, 529, 16, 47, "Input",ExpressionUUID->"3b086448-19b1-4fb9-92fc-2f7ca57aa6d5"],
Cell[31760, 914, 759, 24, 84, "Output",ExpressionUUID->"b21f4d99-195d-45ba-850c-05fbb1261007"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32556, 943, 253, 5, 30, "Input",ExpressionUUID->"776566f1-b89b-4235-a423-987dadf2d73f"],
Cell[32812, 950, 154, 3, 34, "Output",ExpressionUUID->"e26d0aa1-e89f-4fa3-8873-cc4ed069a9c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33003, 958, 247, 5, 30, "Input",ExpressionUUID->"0910404a-44b1-41a2-870e-b29813626324"],
Cell[33253, 965, 154, 3, 34, "Output",ExpressionUUID->"6b9d847a-102a-47c6-8916-aa9925542095"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33444, 973, 350, 6, 30, "Input",ExpressionUUID->"8d58d52b-0ffa-4613-a276-192cc34a183e"],
Cell[33797, 981, 156, 3, 34, "Output",ExpressionUUID->"5947ac6e-3b1f-493f-a69f-1224d1a2554b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33990, 989, 302, 7, 30, "Input",ExpressionUUID->"6d7cf13f-29e9-4aa9-a86a-15b7b34ea1d7"],
Cell[34295, 998, 162, 3, 34, "Output",ExpressionUUID->"d95e8db7-e8b9-4294-ac15-a7de5439793c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34494, 1006, 217, 4, 30, "Input",ExpressionUUID->"94d77b0e-ad52-4765-9af2-5260966ee78c"],
Cell[34714, 1012, 198, 3, 34, "Output",ExpressionUUID->"b81a0870-567f-4f91-98d3-6f2ddc1ebd70"]
}, Open  ]],
Cell[34927, 1018, 175, 4, 48, "Input",ExpressionUUID->"391bff9d-f24b-4c6b-b926-de0c3587fe9e"],
Cell[CellGroupData[{
Cell[35127, 1026, 181, 5, 48, "Input",ExpressionUUID->"c930b1af-8ccd-49e1-994d-4c566bbaa4c7"],
Cell[35311, 1033, 159, 3, 34, "Output",ExpressionUUID->"b8968a4f-24d4-439d-b757-87a8f64a9fac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35507, 1041, 236, 4, 30, "Input",ExpressionUUID->"9e4b2214-8cc8-4efd-a905-0c5dfc0009d5"],
Cell[35746, 1047, 156, 3, 34, "Output",ExpressionUUID->"f5371229-c584-4de9-a146-f8393fd50bca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35939, 1055, 261, 6, 30, "Input",ExpressionUUID->"bc58e886-5209-46d8-b1d3-02a4fb623cb7"],
Cell[36203, 1063, 185, 3, 34, "Output",ExpressionUUID->"5ad6999d-71d8-4e3f-8634-ed87626a1d59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36425, 1071, 262, 6, 30, "Input",ExpressionUUID->"4caaa20a-ce40-4157-8425-20b43f942465"],
Cell[36690, 1079, 171, 3, 34, "Output",ExpressionUUID->"ddbaba57-d329-4898-8e38-7a94723ca98b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36898, 1087, 204, 4, 30, "Input",ExpressionUUID->"6b5e468b-b9f8-41c7-9340-1d61f80e1f13"],
Cell[37105, 1093, 174, 3, 34, "Output",ExpressionUUID->"7366f158-d3a3-456a-a228-a243d74bee5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37316, 1101, 198, 4, 30, "Input",ExpressionUUID->"5043f06b-b28c-4672-bdc1-8521a570ed7e"],
Cell[37517, 1107, 187, 3, 34, "Output",ExpressionUUID->"bf776cf4-4af9-4932-b85c-1b13289d7469"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37741, 1115, 331, 8, 30, "Input",ExpressionUUID->"6dfcb092-eb95-485e-9628-d8c724472344"],
Cell[38075, 1125, 192, 3, 34, "Output",ExpressionUUID->"46438aa4-d6fb-488d-8ee4-fbc23383575d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38304, 1133, 445, 13, 30, "Input",ExpressionUUID->"58766f7a-5ce4-42df-9b2e-9f0abb3b5a0f"],
Cell[38752, 1148, 180, 3, 34, "Output",ExpressionUUID->"1f4488a1-acf1-484a-95d1-5cce52a3430e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38969, 1156, 257, 6, 30, "Input",ExpressionUUID->"45e569f1-303a-4b87-b42a-9646963e1ff2"],
Cell[39229, 1164, 161, 3, 34, "Output",ExpressionUUID->"d52ec2d2-0d94-40c9-951f-100b72fa108c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39427, 1172, 207, 4, 30, "Input",ExpressionUUID->"3112dc29-f4c0-41e5-bb83-64d0e3f297c2"],
Cell[39637, 1178, 172, 3, 34, "Output",ExpressionUUID->"34385263-2e1f-4699-8120-d852c463af61"]
}, Open  ]],
Cell[39824, 1184, 207, 4, 30, "Input",ExpressionUUID->"907be047-b498-4db7-aeeb-6316ddc29477"],
Cell[CellGroupData[{
Cell[40056, 1192, 206, 4, 30, "Input",ExpressionUUID->"4bc5e5c6-e893-41d2-adaf-47f3f326bef8"],
Cell[40265, 1198, 189, 3, 34, "Output",ExpressionUUID->"0f766311-9d00-42a8-ad5b-fc019e05e843"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40491, 1206, 273, 6, 30, "Input",ExpressionUUID->"72a167ec-47d0-4c82-8671-a1dcda9c1205"],
Cell[40767, 1214, 194, 3, 34, "Output",ExpressionUUID->"33decaf1-7cde-4fc1-bc25-80515d969175"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40998, 1222, 379, 10, 30, "Input",ExpressionUUID->"94a433a3-886d-4e15-9fa7-ef8c9f8e9003"],
Cell[41380, 1234, 222, 4, 34, "Output",ExpressionUUID->"083e4062-6821-4a4c-8e5d-7bd7beef8c35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41639, 1243, 132, 3, 30, "Input",ExpressionUUID->"0d3b8d6d-9b17-40cb-88a7-b2498379007d"],
Cell[41774, 1248, 161, 3, 34, "Output",ExpressionUUID->"6e01fb23-43ff-4c06-9c74-103383d61760"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41972, 1256, 206, 4, 30, "Input",ExpressionUUID->"6073b9da-bb0e-4e2f-af6d-5c5fe5451e3e"],
Cell[42181, 1262, 172, 3, 34, "Output",ExpressionUUID->"f820beb1-76cc-41d0-b799-6f11a7ce7e19"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42390, 1270, 261, 6, 30, "Input",ExpressionUUID->"1992e3f5-71ed-4f2e-bea3-ccc938704da3"],
Cell[42654, 1278, 169, 3, 34, "Output",ExpressionUUID->"47bf8aac-78fc-4383-ba86-a4df2c3e3a0b"]
}, Open  ]],
Cell[42838, 1284, 152, 3, 30, "Input",ExpressionUUID->"a52e5113-3623-4b2f-b0d4-12a9ca7affc6"],
Cell[42993, 1289, 754, 19, 111, "Text",ExpressionUUID->"23becff9-3d72-4687-8d03-b8c9b1f98e44"],
Cell[43750, 1310, 244, 6, 30, "Input",ExpressionUUID->"89d1b74c-b2a0-46a5-b3d0-6f4338e88511"],
Cell[43997, 1318, 274, 5, 30, "Input",ExpressionUUID->"eefad0a5-356e-493b-9c77-586dc55d019f"],
Cell[CellGroupData[{
Cell[44296, 1327, 269, 5, 30, "Input",ExpressionUUID->"65057db0-2854-448d-9742-4b5922a86abc"],
Cell[44568, 1334, 186, 3, 34, "Output",ExpressionUUID->"67797cae-0159-4216-b1bc-9c3e214e7434"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44791, 1342, 292, 7, 30, "Input",ExpressionUUID->"6ea00d94-25b7-45be-8837-5c8132807726"],
Cell[45086, 1351, 180, 3, 34, "Output",ExpressionUUID->"6ec03eff-6934-4123-bd13-8d6d87efacf8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45303, 1359, 213, 4, 30, "Input",ExpressionUUID->"c9647780-39b4-47e5-a979-0610971ebd9f"],
Cell[45519, 1365, 171, 3, 34, "Output",ExpressionUUID->"cede4a62-69f2-4f13-97f3-9746e717262d"]
}, Open  ]],
Cell[45705, 1371, 184, 4, 30, "Input",ExpressionUUID->"d24e1262-c3b3-46d6-aca6-7f73c2261d02"],
Cell[CellGroupData[{
Cell[45914, 1379, 331, 7, 30, "Input",ExpressionUUID->"498a5d65-e5d8-490b-be8b-6c5cdc962433"],
Cell[46248, 1388, 217, 2, 34, "Output",ExpressionUUID->"fdf52b77-7023-41dc-9db4-7ef7dae13977"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46502, 1395, 362, 8, 30, "Input",ExpressionUUID->"2f4d82ef-da59-4384-853f-bea30a83e3ce"],
Cell[46867, 1405, 189, 2, 34, "Output",ExpressionUUID->"05bc4c8d-18a1-4bcc-b0f4-6e684262a479"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47093, 1412, 328, 7, 30, "Input",ExpressionUUID->"ee2dfcbc-3af6-4c19-92e5-1f48dc3d7181"],
Cell[47424, 1421, 157, 2, 34, "Output",ExpressionUUID->"3eb30c58-0bb7-4712-9a60-28975efa4845"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47618, 1428, 339, 8, 30, "Input",ExpressionUUID->"15c2204d-345e-4d52-bdfb-d3b491b1c117"],
Cell[47960, 1438, 190, 2, 34, "Output",ExpressionUUID->"ac74d435-018f-403b-a339-eab32ce73977"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48187, 1445, 19222, 456, 65, "WolframAlphaShortInput",ExpressionUUID->"4625db83-d83c-4180-ae38-a83ce8d70a5c"],
Cell[67412, 1903, 512, 11, 36, "Output",ExpressionUUID->"f1a0304c-08d1-4768-85e5-e2e30ab8df60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67961, 1919, 504, 13, 30, "Input",ExpressionUUID->"13e54a30-924a-4bbe-81d5-df1793a9dafb"],
Cell[68468, 1934, 282, 7, 56, "Output",ExpressionUUID->"b8ef0ce5-6f1e-4b29-b564-71da37781750"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68787, 1946, 310, 8, 48, "Input",ExpressionUUID->"ad839920-cb0c-423d-9e4e-a32b01402c66"],
Cell[69100, 1956, 206, 4, 51, "Output",ExpressionUUID->"867508ea-c34c-4f76-a188-d7918639786e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69343, 1965, 429, 12, 48, "Input",ExpressionUUID->"3d4c2501-1de9-4901-9299-d19451bf79dc"],
Cell[69775, 1979, 197, 3, 34, "Output",ExpressionUUID->"6ac13eaa-84be-4cb0-998e-01b88c72160b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70009, 1987, 503, 13, 30, "Input",ExpressionUUID->"ad6eedc2-d40c-4f1e-a501-4a0b8ea306e9"],
Cell[70515, 2002, 283, 7, 56, "Output",ExpressionUUID->"60cc6f28-5874-465f-a8d7-e1c035e804ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70835, 2014, 309, 8, 48, "Input",ExpressionUUID->"0394883f-d864-471c-a1e6-1e0eca8e4d11"],
Cell[71147, 2024, 205, 4, 51, "Output",ExpressionUUID->"d3c98735-4384-472c-8b09-2d88c1c55887"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71389, 2033, 428, 12, 48, "Input",ExpressionUUID->"691546dc-a1a4-45f2-91d8-7695eb3144a3"],
Cell[71820, 2047, 198, 3, 34, "Output",ExpressionUUID->"e416a559-3fc7-45ba-892a-468e5e55f68c"]
}, Open  ]],
Cell[72033, 2053, 129, 1, 30, "Input",ExpressionUUID->"447e01aa-53eb-4696-b6aa-4d41279c4f8b"],
Cell[CellGroupData[{
Cell[72187, 2058, 280, 6, 30, "Input",ExpressionUUID->"7d1970b0-c98c-4fa1-b17b-a105e314f7de"],
Cell[72470, 2066, 172, 2, 34, "Output",ExpressionUUID->"7a7c4b2f-4016-463b-b193-db8f2a20f512"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72679, 2073, 198, 3, 30, "Input",ExpressionUUID->"98748c0a-653c-458d-8094-f736668e6e99"],
Cell[72880, 2078, 170, 3, 51, "Output",ExpressionUUID->"225463bb-efe8-4ea9-a7fe-4295efd8e23b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73087, 2086, 176, 4, 48, "Input",ExpressionUUID->"85bfd320-d67a-4756-9756-43a7eb526ddf"],
Cell[73266, 2092, 157, 2, 34, "Output",ExpressionUUID->"048d436c-77f0-4735-87e2-d59d13a75027"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73460, 2099, 333, 7, 30, "Input",ExpressionUUID->"00063b6c-6e03-43b3-9996-0e0cb152c87d"],
Cell[73796, 2108, 209, 3, 34, "Output",ExpressionUUID->"6a9194e2-e6ce-4d6a-83fc-e35d6258ace1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74042, 2116, 349, 7, 30, "Input",ExpressionUUID->"c83f91a6-7bc4-4295-83ca-ed3f048c8c9e"],
Cell[74394, 2125, 197, 3, 51, "Output",ExpressionUUID->"2fc3a970-aa58-4566-ad7f-afc827981af5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74628, 2133, 221, 5, 48, "Input",ExpressionUUID->"c7e4828a-f8ee-4825-bea9-08eae7bfb4ae"],
Cell[74852, 2140, 192, 2, 34, "Output",ExpressionUUID->"a2ef2ea5-a1a8-422c-a383-4be38f62b2ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75081, 2147, 316, 7, 30, "Input",ExpressionUUID->"50d1555c-9289-4b66-98a6-03ee3c564a6e"],
Cell[75400, 2156, 190, 2, 34, "Output",ExpressionUUID->"358edd40-ebdf-466f-b957-14602f1c7a41"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75627, 2163, 266, 5, 30, "Input",ExpressionUUID->"09ff5232-8350-44e6-a7e8-be956682debe"],
Cell[75896, 2170, 167, 2, 34, "Output",ExpressionUUID->"5b9ba3e1-7855-4036-a61c-42be5cdd2c10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76100, 2177, 257, 5, 30, "Input",ExpressionUUID->"61b5d426-0a91-4899-85bd-85b2bba1fa35"],
Cell[76360, 2184, 167, 2, 34, "Output",ExpressionUUID->"1d45dc67-b413-44d9-a0b9-615bfc3ca735"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76564, 2191, 253, 4, 30, "Input",ExpressionUUID->"ebb62be7-bdb1-46c8-9a90-4e99285612e9"],
Cell[76820, 2197, 169, 2, 34, "Output",ExpressionUUID->"08bd3e98-6387-49fe-a2a1-274fb0d68eb9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77026, 2204, 283, 6, 55, "Input",ExpressionUUID->"c7c32da3-bc41-492c-bdad-fac393c8f12b"],
Cell[77312, 2212, 166, 2, 34, "Output",ExpressionUUID->"8d9bc835-33aa-4c42-b234-5bafe1bccb17"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77515, 2219, 281, 6, 55, "Input",ExpressionUUID->"453088ed-8c77-4a80-9d90-683beae4fee3"],
Cell[77799, 2227, 167, 2, 34, "Output",ExpressionUUID->"ec3d8bf8-7a3f-4d28-bf3a-3c62fd58b712"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78003, 2234, 281, 6, 55, "Input",ExpressionUUID->"7259cba2-e936-4224-85ea-03ffa31270e6"],
Cell[78287, 2242, 166, 2, 34, "Output",ExpressionUUID->"42d949b6-cfd2-4a64-9d27-5612ce586dd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78490, 2249, 233, 3, 30, "Input",ExpressionUUID->"63253a6f-6ca3-4535-b90f-dec5e95fc0b3"],
Cell[78726, 2254, 167, 2, 34, "Output",ExpressionUUID->"d7517089-8517-40db-af8b-ec69332c3bb9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78930, 2261, 230, 4, 30, "Input",ExpressionUUID->"251d48e6-5a45-48f4-8613-d66017350943"],
Cell[79163, 2267, 155, 2, 34, "Output",ExpressionUUID->"759be13e-e4d1-417f-906e-57bdd2a0f2d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79355, 2274, 265, 7, 30, "Input",ExpressionUUID->"358cb11b-206e-443f-b048-140459a887e8"],
Cell[79623, 2283, 179, 2, 34, "Output",ExpressionUUID->"af3b25ae-c76f-491b-b3d9-7c06fbad2f0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79839, 2290, 335, 7, 30, "Input",ExpressionUUID->"3dfe4a70-cb45-49e0-a865-bf896bff2fd3"],
Cell[80177, 2299, 210, 2, 34, "Output",ExpressionUUID->"9489a26a-b51c-4943-a1cc-6d4ce10e66a7"]
}, Open  ]],
Cell[80402, 2304, 263, 7, 36, "Input",ExpressionUUID->"561f4e01-3ef2-45aa-9c44-cd2cc6d122bc"],
Cell[CellGroupData[{
Cell[80690, 2315, 259, 5, 30, "Input",ExpressionUUID->"8d74c668-89ae-4aa1-b77e-67013753d640"],
Cell[80952, 2322, 210, 3, 34, "Output",ExpressionUUID->"2d8852ac-21c3-40cc-b250-500bfb1c2086"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81199, 2330, 459470, 8452, 3255, "WolframAlphaShortInput",ExpressionUUID->"4a0477d3-ff13-41eb-a87d-15a74ea15014"],
Cell[540672, 10784, 309, 7, 38, "Output",ExpressionUUID->"e3df0aa6-f8c3-45a0-a2f2-10c9e4fde4ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[541018, 10796, 363, 9, 30, "Input",ExpressionUUID->"3d86361b-bbd6-4872-99ce-e0ec45b2419e"],
Cell[541384, 10807, 374, 10, 34, "Output",ExpressionUUID->"7445b53c-a7cd-4ee1-9948-5ff4a2725c03"]
}, Open  ]],
Cell[CellGroupData[{
Cell[541795, 10822, 372, 9, 40, "Input",ExpressionUUID->"5911c6ae-53d1-472f-a298-da2cd11063a1"],
Cell[542170, 10833, 282, 6, 38, "Output",ExpressionUUID->"e7ca166b-739e-445c-975f-9590529275b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[542489, 10844, 290, 6, 34, "Input",ExpressionUUID->"b5f28bb8-3b1a-4dc0-bd60-92a82e985e62"],
Cell[542782, 10852, 228, 4, 34, "Output",ExpressionUUID->"51551594-a532-4c07-96f0-c8d00b8ed691"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543047, 10861, 232, 6, 31, "Input",ExpressionUUID->"7a9beaa4-6117-4558-a4ea-3264a717d657"],
Cell[543282, 10869, 152, 2, 34, "Output",ExpressionUUID->"b8e14656-eed8-4bc7-82ff-4ecfbe7b93fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[543471, 10876, 396, 10, 30, "Input",ExpressionUUID->"5e8cad21-3a9e-47fb-9328-e9a5570d43c9"],
Cell[543870, 10888, 319, 8, 53, "Output",ExpressionUUID->"8966ed77-4a15-4f40-a495-d363c20c7e46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[544226, 10901, 253, 5, 30, "Input",ExpressionUUID->"1a2f318e-f4ca-4c82-9a95-e4b3b9b1c799"],
Cell[544482, 10908, 157, 2, 34, "Output",ExpressionUUID->"9ed1a955-6f82-4be6-b0b1-2e4983bc7542"]
}, Open  ]],
Cell[CellGroupData[{
Cell[544676, 10915, 303, 6, 48, "Input",ExpressionUUID->"889dd9cb-accc-4c71-9fa1-8e2229d65938"],
Cell[544982, 10923, 166, 2, 34, "Output",ExpressionUUID->"b5288d00-baac-44e7-8dd1-8db880c8417f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[545185, 10930, 260, 7, 30, "Input",ExpressionUUID->"fe328d0d-ce31-4164-8c8f-6a8e94ecdb89"],
Cell[545448, 10939, 197, 2, 34, "Output",ExpressionUUID->"e09be0de-9530-432c-871d-97b733f23753"]
}, Open  ]],
Cell[CellGroupData[{
Cell[545682, 10946, 211, 3, 30, "Input",ExpressionUUID->"482509a5-665d-4daa-94ef-489b5e2efd9f"],
Cell[545896, 10951, 157, 2, 34, "Output",ExpressionUUID->"bb87d824-abe8-47b7-bf55-99ad3ccc03b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[546090, 10958, 261, 4, 30, "Input",ExpressionUUID->"dc83df90-8529-46d7-91a3-ea681b847869"],
Cell[546354, 10964, 178, 2, 34, "Output",ExpressionUUID->"bcd98b64-fca4-4938-8379-a7751781ca0c"]
}, Open  ]],
Cell[546547, 10969, 207, 4, 30, "Input",ExpressionUUID->"b49d206f-8d8c-4c33-9bd2-eac55edb6bdc"]
}
]
*)

